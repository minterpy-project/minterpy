{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "60f73f47",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "# One-Dimensional Polynomial Interpolation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9250bb6bcb0da956",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Welcome to the first in-depth tutorial of Minterpy!\n",
    "\n",
    "Minterpy is an open source Python package for carrying out numerical tasks with multivariate (multi-dimensional) polynomials.\n",
    "You can do a wide range of arithmetic and calculus operations with Minterpy polynomials.\n",
    "\n",
    "_But how to create such polynomials in the first place?_\n",
    "\n",
    "This tutorial demonstrates how you can create such a polynomial in the most typical use case."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7dbbdff064d29556",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "## Import Minterpy\n",
    "\n",
    "After installing {doc}`installing Minterpy </getting-started/index>`, you can import it as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "91e743767ddf5d26",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-08-23T11:06:29.487413Z",
     "start_time": "2024-08-23T11:06:26.872834Z"
    },
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import minterpy as mp"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f55c64e669a92386",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "The shorthand `mp` is the convention we, the developer team, like to use; it's short and recognizable (just like `np` for NumPy and `pd` for pandas)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e773ec89-4a90-47e4-a034-81cfd61150f7",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "You will also need to import NumPy and Matplotlib to follow along with this guide."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "26f8a4b7-8487-40d9-8c7a-d54ce3bc2224",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7ac4bf8-40f0-443e-8eb6-cfe70cbd7490",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "## Motivating function\n",
    "\n",
    "In Minterpy, the polynomials are typically (but not always) interpolating polynomials that approximate functions of interest.\n",
    "In fact, this is one of the main objective of Minterpy: approximating a (multi-dimensional) function using a polynomial.\n",
    "\n",
    "For now, however, consider the following one-dimensional function:\n",
    "\n",
    "$$\n",
    "f(x) = \\frac{1}{1 + 25 x^2}, x \\in [-1, 1].\n",
    "$$\n",
    "\n",
    "Define this function in Python:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3d33fef8-8943-4821-87fb-871ffe2038d3",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "fun = lambda x: 1 / (1 + 25 * x**2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4e2db61-483a-4aba-814e-407e6874554f",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "The plot of the function is shown below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0423656d-9c9c-46a1-a4e3-369b58b2fb53",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "xx = np.linspace(-1, 1, 300)\n",
    "plt.plot(xx, fun(xx))\n",
    "plt.xlabel(\"$x$\", fontsize=14)\n",
    "plt.ylabel(\"$y$\", fontsize=14)\n",
    "plt.tick_params(axis='both', which='major', labelsize=12)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa2c5786-f9f3-44a5-9493-840b765b0aac",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "With the function of interest defined, you are now ready to create a polynomial that approximates it."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f09142d-042a-47ef-9afe-c94524304313",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "## Create an interpolating polynomial\n",
    "\n",
    "To create an interpolating polynomial from scratch in Minterpy, follow these four main steps:\n",
    "\n",
    "1. **Define the multi-index set**: Specify the multi-index set that determines the structure of the polynomial.\n",
    "2. **Construct an interpolation grid**: Create an interpolation grid, which consists of the points at which the function of interest will be evaluated.\n",
    "3. **Evaluate the function of interest at the grid points**: Compute the function values at the grid points (also known as the unisolvent nodes)\n",
    "4. **Create a polynomial in the Lagrange basis**: Construct the interpolating polynomial in the Lagrange basis based on the evaluated points.\n",
    "\n",
    "To perform additional operations with the interpolating polynomial, such as evaluating it a set of query points, follow this extra step:\n",
    "\n",
    "5. **Transform the polynomial to another basis**: Change the basis of the interpolating polynomial from the Lagrange basis to another basis, preferably the Newton asis, for convenient evaluation and manipulation.\n",
    "\n",
    "Letâ€™s go through these steps one at a time."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9dcf9c3a-aff8-4c92-ac49-75526cfed8de",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "### Define a multi-index set\n",
    "\n",
    "In Minterpy, the exponents of a multivariate polynomial are represented using multi-indices within a set known as the multi-index set. This set generalizes the notion of polynomial degree to multiple dimensions. For more details, see the the {ref}`relevant section <fundamentals/polynomial-bases:Multi-index sets and polynomial degree>` of the documentation.\n",
    "\n",
    "Even though our function is one-dimensional, defining the multi-index set (in this case, of dimension $1$) is still the first steps of constructing a Minterpy polynomial.\n",
    "\n",
    "In Minterpy, multi-index sets are represented by the {py:class}`MultiIndexSet <.core.multi_index.MultiIndexSet>` class.\n",
    "You can create a complete multi-index set using the class method {py:meth}`from_degree() <.MultiIndexSet.from_degree>`, which requires the spatial dimension (first argument) and the polynomial degree (second argument).\n",
    "\n",
    "To construct a one-dimensional multi-index set of polynomial degree, say, $10$, type:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c312e5fa-0a22-4506-90e9-52dfd5af4ca1",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "mi = mp.MultiIndexSet.from_degree(1, 10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90312e2b-fd30-4a3a-85dc-968d0e92f3c3",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "This produces the following instance:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "08e2fc63-bbd6-43c3-9819-e0ee7d693231",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "mi"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b8e3565-0e62-4da9-b441-1b25ecceefbb",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "### Construct an interpolation grid\n",
    "\n",
    "An interpolation grid is where an interpolating polynomial lives on. The bases of interpolating polynomials, such as the Lagrange or the Newton basis, are defined with respect to these grids.\n",
    "\n",
    "In Minterpy, interpolation grids are represented by the {py:class}`Grid <.core.grid.Grid>` class.\n",
    "The default constructor allows you to create an interpolation grid for a specified multi-index set (the first argument).\n",
    "\n",
    "To create an interpolation grid for the previously defined multi-index set, use the following command:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8bb609a4-77ff-4bd6-8826-878d15616fd9",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "grd = mp.Grid(mi)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2082dc7-37bb-4dc2-b6c5-0ae86c0cea8f",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "An instance of {py:class}`Grid <.core.grid.Grid>` is always defined with respect to a multi-index set.\n",
    "In simple terms, the multi-index set of an interpolation grid determines the structure of multivariate polynomials that the grid can support.\n",
    "\n",
    "A key property of a {py:class}`Grid <.core.grid.Grid>` instance is {py:meth}`unisolvent_nodes <.core.grid.Grid.unisolvent_nodes>` (i.e., interpolating nodes or grid points).\n",
    "These nodes are crucial because they uniquely determine the interpolating polynomial given the multi-index set.\n",
    "By default, Minterpy generates unisolvent nodes based on the {ref}`Leja-ordered Chebyshev-Lobatto points <fundamentals/interpolation-at-unisolvent-nodes:Generating points>`.\n",
    "For the chosen polynomial degree, these nodes are:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "459bfaf9-028c-4ed1-93fe-9fa958f7ceac",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "grd.unisolvent_nodes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e732afb0-5ff7-4385-8fc1-0c1f550930f6",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "which distributed like the following:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "67f42a3b-3460-4f0e-911f-6be4a142d0d8",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": [
     "hide-input"
    ]
   },
   "outputs": [],
   "source": [
    "ax = plt.axes(frameon=False)\n",
    "ax.get_xaxis().tick_bottom()\n",
    "ax.axes.get_yaxis().set_visible(False)\n",
    "ax.scatter(grd.unisolvent_nodes.reshape(-1), np.zeros(len(grd.multi_index)), marker=\"x\", color=\"black\")\n",
    "ax.set_ylim([-0.01, 0.01])\n",
    "ax.hlines(0, -1, 1, linewidth=0.5, linestyle=\"--\", color=\"black\")\n",
    "ax.set_title(\"Interpolation grid\");\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f1fbd2d-9c5c-4e38-865f-5191d47d1465",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Notice that there are more points in the boundaries of the domain."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c98fc063-ce35-4d40-a737-91c594684d85",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "### Evaluate the function at the unisolvent nodes\n",
    "\n",
    "An interpolating polynomial $Q$ with a domain of $[-1, 1]$ of a function $f$ is a polynomial that satisfies the following condition:\n",
    "\n",
    "$$\n",
    "Q(p_{\\alpha}) = f(p_{\\alpha}), \\forall p_{\\alpha} \\in P_A,\n",
    "$$\n",
    "\n",
    "where $P_A = \\{ p_{\\alpha} \\}$ is the set of unisolvent nodes.\n",
    "\n",
    "The function values at the unisolvent nodes are therefore crucial to construct an interpolating polynomial.\n",
    "\n",
    "In Minterpy, calling an instance of {py:meth}`Grid <.core.grid.Grid.__call__>` with a given function evaluates the function at the unisolvent nodes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "462686ce-9b10-488b-a8a8-3f934ca3600f",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "coeffs = grd(fun)\n",
    "coeffs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3092be0-2c28-4545-8aa0-de6cd40a5225",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "### Create a Lagrange polynomial\n",
    "\n",
    "The function values at the unisolvent nodes are the same as the coefficients $c_{L, \\alpha}$ of a polynomial in the Lagrange basis:\n",
    "\n",
    "$$\n",
    "Q(x) = \\sum_{\\alpha \\in A} c_{\\mathrm{lag}, \\alpha} \\Psi_{\\mathrm{lag}, \\alpha}(x),\n",
    "$$\n",
    "\n",
    "where $A$ is the multi-index set and $\\Psi_{\\alpha}$'s are monomials of the Lagrange basis that satisfy:\n",
    "\n",
    "$$\n",
    "\\Psi_{\\mathrm{lag}, \\alpha}(p_{\\beta}) = \\delta_{\\alpha, \\beta}, p_\\beta \\in P_A,\n",
    "$$\n",
    "\n",
    "where $\\delta{\\cdot, \\cdots}$ denotes the Kronecker delta.\n",
    "\n",
    "Polynomials in the Lagrange basis are represented by the {py:class}`LagrangePolynomial <.polynomials.lagrange_polynomial.LagrangePolynomial>` class in Minterpy.\n",
    "You can create an instance of {py:class}`LagrangePolynomial <.polynomials.lagrange_polynomial.LagrangePolynomial>` class with various constructors.\n",
    "Relevant to the present tutorial, {py:meth}`from_grid() <.polynomials.lagrange_polynomial.LagrangePolynomial.from_grid>` constructor accepts an instance of {py:class}`Grid <.core.grid.Grid>` and the corresponding Lagrange coefficients (i.e., function values at the unisolvent nodes) to create an instance of {py:class}`LagrangePolynomial <.polynomials.lagrange_polynomial.LagrangePolynomial>`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9f771730-7f4c-4e27-ac66-3f6a5ce4b224",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "lag_poly = mp.LagrangePolynomial.from_grid(grd, coeffs)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7284326-e5c8-4f9f-b199-d4f8996a9f2e",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Congratulations! You've just made your first polynomial in Minterpy."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "150c12ae-e1d9-43cf-9841-66ceb276cf41",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "### Transform to the Newton basis\n",
    "\n",
    "Unfortunately, polynomials in the Lagrange basis have limited functionality; for instance, you can't directly evaluate them at a set of query points.\n",
    "\n",
    "In Minterpy, the Lagrange basis primarily serves as a convenient starting point for constructing an interpolating polynomial.\n",
    "The coefficients in this basis are straightforwardly defined as the function values at the unisolvent nodes (grid points).\n",
    "\n",
    "To perform more advanced operations with the polynomial in Minterpy, you need to transform it into the Newton basis.\n",
    "In the Newton basis, the polynomial takes the form:\n",
    "\n",
    "$$\n",
    "Q(x) = \\sum_{\\alpha \\in A} c_{\\mathrm{nwt}, \\alpha} \\, \\Psi_{\\mathrm{nwt}, \\alpha}(x),\n",
    "$$\n",
    "\n",
    "where $c_{\\mathrm{nwt}, \\alpha}$'s are the coefficients of the polynomial in the Newton basis and $\\Psi_{\\mathrm{nwt}, \\alpha}$ is the monomial of the Newton basis associated with multi-index element $\\alpha$:\n",
    "\n",
    "$$\n",
    "\\Psi_{\\mathrm{nwt}, \\alpha}(x) = \\prod_{i = 0}^{\\alpha - 1} (x - p_i),\n",
    "$$\n",
    "\n",
    "where $p_i$'s are the interpolation points (unisolvent nodes)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea978c4a-2d3c-4fe4-8381-0c516fdc0ead",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "To transform a polynomial in the Lagrange basis to a polynomial in the Newton basis, use the {py:class}`LagrangeToNewton <.transformations.lagrange.LagrangeToNewton>` class:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fa913289-4091-4227-b48b-b063e19f381a",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "nwt_poly = mp.LagrangeToNewton(lag_poly)()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47f4e194-6278-4d4c-90e1-be22a46a9dde",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "In the above statement, the first part of the call, `mp.LagrangeToNewton(lag_poly)`, creates a transformation instance that converts the given polynomial from the Lagrange basis to the Newton basis.\n",
    "\n",
    "The second call, which is made without any arguments, performs the transformation and returns the actual Newton polynomial instance."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c50dc28b-4aab-4898-966d-5e523e06e79d",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "```{note}\n",
    "There are other basis in Minterpy, but for many practical applications we recommend to use the Newton basis.\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ff13e2a-5a24-49d0-b2f0-9e0f5d92560f",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "### Evaluate the polynomial on a set of query points\n",
    "\n",
    "Once a polynomial in the Newton basis is obtained, you can evaluate it on a set of query points; this one of the most routine task involving polynomial approximation.\n",
    "\n",
    "First, create a set of equally spaced test points in $[-1, 1]$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1135bd47-0d6b-460f-9dbe-30e540d951fc",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "xx_test = np.linspace(-1, 1, 1000)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca6253e7-5d06-47b6-bbef-820ef7b7003a",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Then evaluate the original function at these points:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "80b41be3-666d-4981-9f9c-7216fdf3a553",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "yy_test = fun(xx_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01feda6b-7432-4251-a2d0-62be9eb16ac0",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Calling an instance of {py:class}`NewtonPolynomial <.polynomials.newton_polynomial.NewtonPolynomial>` at these query points evaluate the polynomial at the query points:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "28a44ae7-80ec-4af0-99a9-29fc207af5a0",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "yy_poly = nwt_poly(xx_test)\n",
    "yy_poly[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2374da0c-c0ba-4787-9315-071699f7574e",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "As expected, evaluating the polynomial on $1'000$ query points returns an array $1'000$ points:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "84e202d1-3169-4b46-95e8-154b9acd842c",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "yy_poly.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64e8cde4-0bd7-4c04-bfbf-64cd0bddd5fb",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "```{note}\n",
    "For evaluation, an instance of polynomial expects as its input an array; as the polynomial is one dimensional the array should either be one-dimensional or two-dimensional with a single column (the column of a two-dimensional array indicates the values along each spatial dimension).\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "238a0eb7-7abe-420c-a5df-497ca1f5f1e8",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "We can compare the results of the interpolating polynomial against the given function in the plot before:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "04fd327f-dc11-428b-8562-5efc6f45dc68",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": [
     "hide-input"
    ]
   },
   "outputs": [],
   "source": [
    "plt.plot(xx_test, yy_test, label=\"true function ($f$)\")\n",
    "plt.plot(xx_test, yy_poly, label=\"interpolant ($Q$)\")\n",
    "plt.xlabel(\"$x$\", fontsize=14)\n",
    "plt.ylabel(\"$y$\", fontsize=14)\n",
    "plt.scatter(grd.unisolvent_nodes, lag_poly.coeffs, label=\"unisolventÂ nodes\")\n",
    "plt.tick_params(axis='both', which='major', labelsize=12)\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c1a65a2-d260-4b5b-8ec6-927940175899",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Shown also in the plot are the location of unisolvent nodes and the corresponding function values."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b8ee32a-468a-42b6-a1ff-7993bcc300f7",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "### Assess the accuracy of interpolating polynomial\n",
    "\n",
    "As shown in the plot above, the chosen polynomial degree is not accurate enough to approximate the true function.\n",
    "\n",
    "The infinity norm provides a measure of the greatest error of the interpolant over the whole domain.\n",
    "The norm is defined as:\n",
    "\n",
    "$$\n",
    "\\lVert f - Q \\rVert_\\infty = \\sup_{-1 \\leq x \\leq 1} \\lvert f(x) - Q(x) \\rvert\n",
    "$$\n",
    "\n",
    "The infinity norm of $Q$ can be approximated using the $1'000$ testing points created above:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6ae1451a-15e2-472a-a73c-8daa1fc37301",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "np.max(np.abs(yy_test - yy_poly))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f98c9da8-975c-4d1a-93df-9b44975fdf32",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "which is hardly a numerical convergence."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9fc2cddd-54be-4d73-9f0a-b1b21315499f",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "## The `interpolate()` function\n",
    "\n",
    "As an alternative to constructing an interpolating polynomial from scratch using the steps outlined above, you can use the {py:func}`.interpolate` function.\n",
    "The function allows you to specify:\n",
    "\n",
    "- the function to interpolate\n",
    "- the number of dimensions\n",
    "- the degree of polynomial interpolant\n",
    "\n",
    "All in a single function call.\n",
    "This call returns a callable object that can be used with a set of query points.\n",
    "\n",
    "To create an interpolant using the {py:func}`.interpolate` function with the same structure as before, use the following command:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "527320b4-5331-4a58-8750-a42d6ddf8d8b",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "q = mp.interpolate(fun, spatial_dimension=1, poly_degree=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6daea911-300d-47f1-a974-dfe677ba916e",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "The resulting interpolant can be evaluated at a set of query points:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7d29a835-5f4c-49b1-afe3-5477a0194152",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "q(xx_test)[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "081c98e1-b99a-42e0-ab3d-003bd7423e9b",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "With this short-cut to create an interpolant where evaluation is all that is needed, let's investigate the convergence of interpolating polynomials with increasing polynomial degrees.,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a61f8012-fd77-4350-a364-b6dd9ff3f2b5",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "poly_degrees = [4, 8, 16, 32, 64, 128, 256]\n",
    "yy_poly = np.empty((len(xx_test), len(poly_degrees)))\n",
    "for i, n in enumerate(poly_degrees):\n",
    "    fx_interp = mp.interpolate(fun, spatial_dimension=1, poly_degree=n)\n",
    "    yy_poly[:, i] = fx_interp(xx_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7381194c-744d-47ae-bb01-a4caee8deeea",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "The interpolants of increasing degrees looks like:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "227a02db-d1c5-4b11-a882-d805eb2bc9a6",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": [
     "hide-input"
    ]
   },
   "outputs": [],
   "source": [
    "plt.plot(xx_test, yy_test);\n",
    "for i, n in enumerate(poly_degrees):\n",
    "    plt.plot(xx_test, yy_poly[:, i], label=\"degree = {}\".format(n))\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c16b79fc-29b8-4267-baf3-1bb8417d2707",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "The convergence of the error is shown below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8a3da62f",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "errors = np.max(np.abs(yy_test[:, np.newaxis] - yy_poly), axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "013d3c3b",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": [
     "hide-input"
    ]
   },
   "outputs": [],
   "source": [
    "plt.plot(poly_degrees, errors, '-x');\n",
    "plt.yscale(\"log\");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b086f61-6e97-4b90-9495-705d9ca79504",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "The absolute error of the degree 64 polynomials in the domain is shown below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ac8fcc7f",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": [
     "hide-input"
    ]
   },
   "outputs": [],
   "source": [
    "plt.plot(xx_test, np.abs(yy_test - yy_poly[:, -1]))\n",
    "plt.ylim(1e-18,1)\n",
    "plt.yscale(\"log\");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a280805-c941-4567-bc20-7c66b22b095e",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "The seemingly random behavior of the (very small) absolute error indicates that machine precision has been reached. Compare it with the absolute error of degree 4 polynomials:"
   ]
  },
  {
   "metadata": {},
   "cell_type": "code",
   "outputs": [],
   "execution_count": null,
   "source": [
    "plt.plot(xx_test, np.abs(yy_test - yy_poly[:, 0]))\n",
    "plt.yscale(\"log\");"
   ],
   "id": "5ddc236432458232"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "## From Interpolant to polynomial\n",
    "\n",
    "The callable produced by {py:func}`interpolate() <.interpolation.interpolate>`\n",
    "is an instance of {py:class}`Interpolant <.interpolation.Interpolant>`;\n",
    "it is not a Minterpy polynomial!\n",
    "\n",
    "There are, however, convenient methods to represent the interpolant in one of the Minterpy polynomials.\n",
    "These methods are summarized in the table below.\n",
    "\n",
    "|                               Method                                |                    Return the interpolant as a polynomial in the...                     |\n",
    "|:-------------------------------------------------------------------:|:---------------------------------------------------------------------------------------:|\n",
    "|    {py:meth}`to_newton() <.interpolation.Interpolant.to_newton>`    |     {py:class}`NewtonPolynomial <.polynomials.newton_polynomial.NewtonPolynomial>`      |\n",
    "|  {py:meth}`to_lagrange() <.interpolation.Interpolant.to_lagrange>`  |  {py:class}`LagrangePolynomial <.polynomials.lagrange_polynomial.LagrangePolynomial>`   |\n",
    "| {py:meth}`to_canonical() <.interpolation.Interpolant.to_canonical>` | {py:class}`CanonicalPolynomial <.polynomials.canonical_polynomial.CanonicalPolynomial>` |\n",
    "| {py:meth}`to_chebyshev() <.interpolation.Interpolant.to_chebyshev>` | {py:class}`CanonicalPolynomial <.polynomials.chebyshev_polynomial.ChebyshevPolynomial>` |\n",
    "\n",
    "These bases will be the topic of {doc}`/getting-started/polynomial-bases-and-transformations`\n",
    "in-depth tutorial.\n",
    "\n",
    "For now to obtain the interpolating polynomial in the Newton basis, call:"
   ],
   "id": "692e6d3992a02e39"
  },
  {
   "metadata": {},
   "cell_type": "code",
   "outputs": [],
   "execution_count": null,
   "source": "fx_interp.to_newton()",
   "id": "2b3192c790d330ae"
  },
  {
   "cell_type": "markdown",
   "id": "e69f3784-03c9-4696-9f1f-ea83d0d2b9e4",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "## Summary\n",
    "\n",
    "Congratulations on completing the first in-depth tutorial of Minterpy!\n",
    "\n",
    "In this tutorial, you've learned how to create an interpolating polynomial from scratch in Minterpy to approximate a given function and evaluate it at a set of query points. Specifically, you covered:\n",
    "\n",
    "1. **Defining a multi-index set**: Establishing the structure of the polynomial.\n",
    "2. **Constructing an interpolation grid**: Creating the grid points (unisolvent nodes) for interpolation.\n",
    "3. **Evaluating the given function on the grid points**: Computing function values at the nodes.\n",
    "4. **Constructing a polynomial in the Lagrange basis**: Creating an interpolating polynomial in the Lagrange basis with the function values as the coefficients.\n",
    "5. **Transform the polynomial into the Newton basis**: Changing the basis from the Lagrange basis to the Newton basis for more flexibility.\n",
    "\n",
    "You've also explored the {py:func}`.interpolate` function, which simplifies the process of creating an interpolant.\n",
    "\n",
    "Finally, you've learned how to assess the accuracy of an interpolating polynomial as an approximation of the given function and how to investigate its empirical convergence by adjusting the polynomial degree.\n",
    "\n",
    "---\n",
    "\n",
    "Minterpy, as its name implies, supports the construction of multivariate (multi-dimensional) polynomials as well. The process for constructing these polynomials follows similar steps to those described here.\n",
    "\n",
    "In the next tutorial, you'll learn how to create multi-dimensional polynomials in Minterpy."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
