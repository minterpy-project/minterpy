{
 "cells": [
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "# Evaluate a Function on a Grid",
   "id": "5223970d3d19e2f7"
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": [
    "import minterpy as mp\n",
    "import numpy as np"
   ],
   "id": "d32b739de18f3508",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "Calling an instance of `Grid` with a function or a `Callable` evaluates\n",
    "the given function on the unisolvent nodes and returns the corresponding\n",
    "function values. In the context of polynomial interpolation, these function\n",
    "values are the coefficients of a polynomial in the Lagrange basis.\n",
    "\n",
    "This guide demonstrates how to call an instance of `Grid` on a function."
   ],
   "id": "aeee3be84ec26284"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "## Example: Function with one-dimensional output\n",
    "\n",
    "Consider the following problem:\n",
    "\n",
    "Compute the formula\n",
    "\n",
    "$$\n",
    "f(\\boldsymbol{x}) = \\sum_{i = 1}^{3} x_i^2, \\boldsymbol{x} \\in [-1, 1]^3 \n",
    "$$\n",
    "\n",
    "on the interpolation grid that corresponds to a complete multi-index set of\n",
    "polynomial degree $3$ with respect to the $l_p$-degree $2.0$. "
   ],
   "id": "9882a42c341e5e4e"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "### Function to evaluate\n",
    "\n",
    "A valid function or callable that can be called with a `Grid` instance\n",
    "must satisfy the following:\n",
    "\n",
    "- it must accept as the first argument a two-dimensional array where\n",
    "  each row corresponds to different evaluation points and each column\n",
    "  corresponds to different spatial dimension.\n",
    "- it must return an array with the same length as the input.\n",
    "\n",
    "The function or callable may accept additional arguments either positional\n",
    "or keyword.\n",
    "\n",
    "The function as required above can be defined as follows:"
   ],
   "id": "2b8c0abb1154afb9"
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": [
    "def fun_one_dim(xx: np.ndarray) -> np.ndarray:\n",
    "    \"\"\"Compute the sum of squared.\"\"\"\n",
    "    return np.sum(xx**2, axis=1)"
   ],
   "id": "2f23b787c2fe8c22",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "### Grid\n",
    "\n",
    "The interpolation grid that corresponds to the complete multi-index set\n",
    "can be created using `from_degree()` factory method:"
   ],
   "id": "b7887f75656036e1"
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": [
    "spatial_dimension = 3\n",
    "poly_degree = 3\n",
    "lp_degree = 2.0\n",
    "grd = mp.Grid.from_degree(spatial_dimension, poly_degree, lp_degree)"
   ],
   "id": "5423c818eaed954e",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "### Function values on the grid\n",
    "\n",
    "By calling the `Grid` instance on the function defined above, we evaluate\n",
    "the function on the unisolvent nodes of the grid:"
   ],
   "id": "d003c89440503b74"
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": "fun_values = grd(fun_one_dim)",
   "id": "6ad1d0d7058539a7",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": "fun_values",
   "id": "21bb8e646d1ae1a4",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "As expected, these values are the same values from evaluating the given function\n",
    "on the unisolvent nodes:"
   ],
   "id": "889aa4320e90604f"
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": "fun_one_dim(grd.unisolvent_nodes)",
   "id": "9354556474471ec8",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "## Example: Function with multi-dimensional output\n",
    "\n",
    "Consider the following problem:\n",
    "\n",
    "Compute the formula\n",
    "\n",
    "$$\n",
    "\\boldsymbol{f}(\\boldsymbol{x}) = (f_1(\\boldsymbol{x}), f_2(\\boldsymbol{x}) ), \\; \\boldsymbol{x} \\in [-1, 1]^3 \n",
    "$$\n",
    "\n",
    "where\n",
    "\n",
    "$$\n",
    "\\begin{aligned}\n",
    "f_1(\\boldsymbol{x}) & = \\sum_{i = 1}^{3} x_i^2,\\\\\n",
    "f_1(\\boldsymbol{x}) & = \\prod_{i = 1}^{3} x_i^2,\n",
    "\\end{aligned}\n",
    "$$\n",
    "\n",
    "on the same interpolation grid as before.\n",
    "\n",
    "Notice that the function now returns two outputs per input value."
   ],
   "id": "71a6221aba37affd"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "The function or callable passed to the `Grid` instance may also return \n",
    "multiple outputs. The function must be defined such that it returns an array \n",
    "whose each column corresponds to the different output.\n",
    "\n",
    "\n",
    "The required function can therefore be defined as follows:"
   ],
   "id": "9f8917e774d22024"
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": [
    "def fun_two_dim(xx: np.ndarray) -> np.ndarray:\n",
    "    \"\"\"Return the sum and product of squared.\"\"\"\n",
    "    yy = np.empty((len(xx), 2))\n",
    "    \n",
    "    yy[:, 0] = np.sum(xx**2, axis=1)\n",
    "    yy[:, 1] = np.prod(xx**2, axis=1)\n",
    "    \n",
    "    return yy"
   ],
   "id": "1f220138fc59421",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "The previous instance of `Grid` can be directly used to obtain the values\n",
    "of the multiple-output function:"
   ],
   "id": "32b066c1caa57773"
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": "grd(fun_two_dim)",
   "id": "204a1fde2ba35f34",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "As expected, calling the `Grid` instance with the function returns a two-dimensional\n",
    "array whose each column corresponds to each outputs and each row corresponds to each unisolvent nodes."
   ],
   "id": "25d39b5f53446e96"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "## Example: Function with additional arguments",
   "id": "37f16c72892dec46"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "While the function passed to a `Grid` instance must take as its first\n",
    "argument a two-dimensional array, additional arguments may also be passed\n",
    "to the function by passing positional and keyword arguments to the call.\n",
    "\n",
    "For instance, suppose the function to be evaluated is defined as follows:"
   ],
   "id": "953e870db5b16a3d"
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": [
    "def fun_with_args(xx: np.ndarray, p: float) -> np.ndarray:\n",
    "    \"\"\"Return the row-wise lp-norm.\"\"\"\n",
    "    return np.sum(np.abs(xx**p), axis=1)**(1/p)"
   ],
   "id": "76a29ffab6728dc",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "To change the behavior of the function call via one of its argument\n",
    "when the function is evaluated on the grid, pass the additional arguments\n",
    "to the call to the `Grid` instance."
   ],
   "id": "c79e415a72686bd3"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "For instance, with the additional argument to `fun_with_args()` as a positional argument:",
   "id": "3814d67a935e699d"
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": "grd(fun_with_args, 1.0)",
   "id": "5ebaf4167d2f639a",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": "grd(fun_with_args, 2.0)",
   "id": "308c1f2cbeaaf680",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "...and as a keyword argument:\n",
   "id": "b81880175b82b934"
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": "grd(fun_with_args, p=3.0)",
   "id": "e8705dfacb4345a2",
   "outputs": [],
   "execution_count": null
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
