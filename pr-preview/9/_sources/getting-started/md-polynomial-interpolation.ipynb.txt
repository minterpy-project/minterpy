{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4f44cdf37aadcff5",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": "# Multidimensional Polynomial Interpolation"
  },
  {
   "cell_type": "markdown",
   "id": "c26c295879e98b28",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "In the {doc}`previous guide </getting-started/1d-polynomial-interpolation>`,\n",
    "you learned the basics of polynomial interpolation in Minterpy for approximating one-dimensional functions.\n",
    "As the name \"Minterpy\" suggests, the package also supports constructing multivariate (multidimensional) function.\n",
    "\n",
    "In this in-depth tutorial, you will learn how to create an interpolating polynomial that approximates a two-dimensional function.\n",
    "We use a two-dimensional example for ease of visualization, but the main steps you'll learn are applicable to polynomials of higher dimensions as well."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8fd381f9-68ea-4dd3-a055-85c8cadcd170",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Before we begin, let's import the necessary packages to follow along with this guide."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1562e776-f727-4ab0-968e-8f798ec9729b",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import minterpy as mp\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea4cacd9-7afd-46af-bf13-582014249a75",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "## Motivating function\n",
    "\n",
    "Consider the following two-dimensional function:\n",
    "\n",
    "$$\n",
    "\\begin{align}\n",
    "\t\\mathcal{M}(\\boldsymbol{x}) = & 0.75 \\exp{\\left( -0.25 \\left( (x_1 - 2)^2 + (x_2 - 2)^2 \\right) \\right) } \\\\\n",
    "                                  & + 0.75 \\exp{\\left( -1.00 \\left( \\frac{(x_1 + 1)^2}{49} + \\frac{(x_2 + 1)^2}{10} \\right) \\right)} \\\\\n",
    "\t\t\t\t\t\t\t\t  & + 0.50 \\exp{\\left( -0.25 \\left( (x_1 - 7)^2 + (x_2 - 3)^2 \\right) \\right)} \\\\\n",
    "\t\t\t\t\t\t\t\t  & - 0.20 \\exp{\\left( -1.00 \\left( (x_1 - 4)^2 + (x_2 - 7)^2 \\right) \\right)} \\\\\n",
    "\\end{align}\n",
    "$$\n",
    "\n",
    "where $\\boldsymbol{x} = (x_1, x_2) \\in [-1, 1]^2$."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "429a1f91-4193-499e-a2c1-d9bc3f287306",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "```{note}\n",
    "This function is known in the literature as the Franke function[^franke]. Here, however, the domain has been redefined to be $[-1, 1]^2$ instead of $[0, 1]^2$.\n",
    "\n",
    "[^franke]: Richard Franke, \"A critical comparison of some methods for interpolation of scattered data,\" Naval Postgraduate School, Monterey, Canada, Technical Report No. NPS53-79-003, 1979. URL: https://core.ac.uk/reader/36727660\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6562028-ef6b-45da-9ca6-21a147cac285",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "The function can be defined in Python as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "51880cd0-08f6-4f11-be3d-4f6ab74e99e3",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def fun(xx: np.ndarray):\n",
    "    xx0 = 9 * xx[:, 0]\n",
    "    xx1 = 9 * xx[:, 1]\n",
    "\n",
    "    # Compute the (first) Franke function\n",
    "    term_1 = 0.75 * np.exp(-0.25 * ((xx0 - 2) ** 2 + (xx1 - 2) ** 2))\n",
    "    term_2 = 0.75 * np.exp(\n",
    "        -1.00 * ((xx0 + 1) ** 2 / 49.0 + (xx1 + 1) ** 2 / 10.0)\n",
    "    )\n",
    "    term_3 = 0.50 * np.exp(-0.25 * ((xx0 - 7) ** 2 + (xx1 - 3) ** 2))\n",
    "    term_4 = 0.20 * np.exp(-1.00 * ((xx0 - 4) ** 2 + (xx1 - 7) ** 2))\n",
    "\n",
    "    yy = term_1 + term_2 + term_3 - term_4\n",
    "\n",
    "    return yy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "607dfb11-6dd0-4706-ab8c-123c5685e2e7",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "The surface and contour plots of the function are shown below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "753dd9d01e17888c",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": [
     "hide-input"
    ]
   },
   "outputs": [],
   "source": [
    "from mpl_toolkits.axes_grid1 import make_axes_locatable\n",
    "\n",
    "# --- Create 2D data\n",
    "xx_1d = np.linspace(-1.0, 1.0, 1000)[:, np.newaxis]\n",
    "mesh_2d = np.meshgrid(xx_1d, xx_1d)\n",
    "xx_2d = np.array(mesh_2d).T.reshape(-1, 2)\n",
    "yy_2d = fun(xx_2d)\n",
    "\n",
    "# --- Create two-dimensional plots\n",
    "fig = plt.figure(figsize=(10, 5))\n",
    "\n",
    "# Surface\n",
    "axs_1 = plt.subplot(121, projection='3d')\n",
    "axs_1.plot_surface(\n",
    "    mesh_2d[0],\n",
    "    mesh_2d[1],\n",
    "    yy_2d.reshape(1000,1000).T,\n",
    "    linewidth=0,\n",
    "    cmap=\"plasma\",\n",
    "    antialiased=False,\n",
    "    alpha=0.5\n",
    ")\n",
    "axs_1.set_xlabel(\"$x_1$\", fontsize=14)\n",
    "axs_1.set_ylabel(\"$x_2$\", fontsize=14)\n",
    "axs_1.set_title(\"Surface plot\", fontsize=14)\n",
    "axs_1.tick_params(axis='both', which='major', labelsize=12)\n",
    "\n",
    "# Contour\n",
    "axs_2 = plt.subplot(122)\n",
    "cf = axs_2.contourf(\n",
    "    mesh_2d[0], mesh_2d[1], yy_2d.reshape(1000, 1000).T, cmap=\"plasma\"\n",
    ")\n",
    "axs_2.set_xlabel(\"$x_1$\", fontsize=14)\n",
    "axs_2.set_ylabel(\"$x_2$\", fontsize=14)\n",
    "axs_2.set_title(\"Contour plot\", fontsize=14)\n",
    "divider = make_axes_locatable(axs_2)\n",
    "cax = divider.append_axes('right', size='5%', pad=0.05)\n",
    "fig.colorbar(cf, cax=cax, orientation='vertical')\n",
    "axs_2.axis('scaled')\n",
    "axs_2.tick_params(axis='both', which='major', labelsize=12)\n",
    "\n",
    "fig.tight_layout(pad=6.0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e01fd44-8897-4842-826e-e823c2aefd05",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "## Create an interpolating polynomial\n",
    "\n",
    "The steps to create a multidimensional interpolating polynomial in Minterpy from scratch are similar to those used for the {doc}`one-dimensional case <1d-polynomial-interpolation>`. The steps are:\n",
    "\n",
    "1. Define the multi-index set of the polynomial\n",
    "2. Construct an interpolation grid\n",
    "3. Evaluate the function of interest at the grid points (so-called unisolvent nodes)\n",
    "4. Create a polynomial in the Lagrange basis\n",
    "5. Transformation from the Lagrange basis to another basis, preferrably the Newton basis, for further manipulation.\n",
    "\n",
    "As before, we will go through these steps one at a time, highlighting any differences that arise compared to the one dimensional case."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a67e126a-2e27-46e4-8774-b6be39e0fc39",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "### Define the multi-index set\n",
    "\n",
    "As demonstrated in the previous tutorial, multi-index sets in Minterpy are represented by the {py:class}`MultiIndexSet <.core.multi_index.MultiIndexSet>` class.\n",
    "You can use the class method {py:meth}`from_degree() <.MultiIndexSet.from_degree>` to create a complete multi-index set for a given spatial dimension (first argument), polynomial degree and polynomial degree (second argument).\n",
    "For multidimensional polynomials, you also need to specify the $l_p$-degree ($> 0.0$) of the multi-index set (third argument).\n",
    "\n",
    "A complete multi-index set with spatial dimension $m$, polynomial degree $n$, and $l_p$-degree $p$ denoted by $A_{m, n, p}$ includes all multi-indices $\\boldsymbol{\\alpha}$ that satisfy the condition $\\lVert \\boldsymbol{\\alpha} \\rVert_p \\leq n$, specifically\n",
    "\n",
    "$$\n",
    "A_{m, n, p} = \\{ \\boldsymbol{\\alpha} \\in \\mathbb{N}^m: \\lVert \\boldsymbol{\\alpha} \\lVert_ p = ( \\alpha_1^p + \\ldots + \\alpha_m^p )^{1/p} \\leq n \\}.\n",
    "$$\n",
    "\n",
    "For instance, the complete multi-index set for $m = 2$, $n = 5$, $p = 2.0$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "178d1c54-dbd9-4df4-8cdd-e6047ef535a0",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "m = 2\n",
    "n = 4\n",
    "p = 2.0\n",
    "mi = mp.MultiIndexSet.from_degree(m, n, p)\n",
    "mi"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f29180c-9ace-4313-a574-00c770c331c6",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": "The set contains the exponents of a multidimensional polynomial. Each column corresponds to the exponents per spatial dimension, while each row indicates the multi-index elements."
  },
  {
   "cell_type": "markdown",
   "id": "aaac4f19-1ab4-469f-be2c-2275ad86b9e6",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "To check how many elements the set contains, you can use the built-in `len()` function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0fd783df-810d-47f1-924a-5f33daf23986",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "len(mi)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02a2863a-a05c-47ac-b129-d03d41686ef1",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Several common choices for $l_p$-degree are $1.0$ (_total-degree set_), $2.0$ (_euclidian-degree set_), and $\\infty$ (_tensorial set_).\n",
    "The illustration below shows the difference between these three different choices of $l_p$-degree (for the same spatial dimension and polynomial degree) in relation to the exponents as multi-indices."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3296387a-83ff-41fe-a65e-c9a6714cc434",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": [
     "hide-input"
    ]
   },
   "outputs": [],
   "source": [
    "mi_1 = mp.MultiIndexSet.from_degree(m, n, 1.0)\n",
    "mi_inf = mp.MultiIndexSet.from_degree(m, n, np.inf)\n",
    "\n",
    "fig, axs = plt.subplots(nrows=1, ncols=3, figsize=(12, 4))\n",
    "\n",
    "axs[0].scatter(mi_1.exponents[:, 0], mi_1.exponents[:, 1], marker='x', color=\"black\")\n",
    "axs[0].set_xlabel(\"exponent (dimension = 1)\", fontsize=14);\n",
    "axs[0].set_ylabel(\"exponent (dimension = 2)\", fontsize=14);\n",
    "axs[0].set_xticks(np.arange(0, n + 1));\n",
    "axs[0].set_yticks(np.arange(0, n + 1));\n",
    "axs[0].set_title(rf\"m = {m}, n = {n}, p = 1.0\", fontsize=16);\n",
    "axs[0].tick_params(axis='both', which='major', labelsize=12)\n",
    "\n",
    "axs[1].scatter(mi.exponents[:, 0], mi.exponents[:, 1], marker='x', color=\"black\")\n",
    "axs[1].set_xlabel(\"exponent (dimension = 1)\", fontsize=14);\n",
    "axs[1].set_xticks(np.arange(0, n + 1));\n",
    "axs[1].set_yticks(np.arange(0, n + 1));\n",
    "axs[1].set_title(rf\"m = {m}, n = {n}, p = 2.0\", fontsize=16)\n",
    "axs[1].tick_params(axis='both', which='major', labelsize=12)\n",
    "\n",
    "axs[2].scatter(mi_inf.exponents[:, 0], mi_inf.exponents[:, 1], marker='x', color=\"black\")\n",
    "axs[2].set_xlabel(\"exponent (dimension = 1)\", fontsize=14);\n",
    "axs[2].set_xticks(np.arange(0, n + 1));\n",
    "axs[2].set_yticks(np.arange(0, n + 1));\n",
    "axs[2].set_title(rf\"m = {m}, n = {n}, p = $\\infty$\", fontsize=16);\n",
    "axs[2].tick_params(axis='both', which='major', labelsize=12)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0148e54c-fd4f-40a8-b45c-c4270db870b7",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "### Construct an interpolation grid\n",
    "\n",
    "An interpolating polynomial, one-dimensional or otherwise, lives on an interpolation grid.\n",
    "\n",
    "To construct an interpolation grid, pass the previously defined multi-index set to the default constructor of the {py:class}`Grid <.cor.grid.Grid>` class:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "938054f6-2ef3-4e45-8490-7b4d6eaad90c",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "grd = mp.Grid(mi)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f56f6f74-c23d-45b8-a06a-d4ad1e73a801",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "The unisolvent nodes associated with the interpolating grid has the same spatial dimension as its defining multi-index set. By default, Minterpy generates unisolvent nodes according to the {ref}`Leja-ordered Chebyshev-Lobatto points <fundamentals/interpolation-at-unisolvent-nodes:Generating points>`.\n",
    "The unisolvent nodes that correspond to the multi-index set are:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "119e82ae-1856-4f76-9082-278ee19b07c7",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "grd.unisolvent_nodes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5f8bd34-dbae-4f83-bfc5-67e905261ff2",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Each row corresponds to two-dimensional grid points; the first and second column contain all the values of the first and second spatial dimension, respectively.\n",
    "These are the points at which the function of interest is evaluated; the results are then used construct an interpolating polynomial.\n",
    "\n",
    "The plots below show three different two-dimensional unisolvent nodes that correspond to three different $l_p$-degrees with the same spatial dimension and polynomial degree."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "887c5bb9-13d1-48dc-a78b-ee836d054232",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": [
     "hide-input"
    ]
   },
   "outputs": [],
   "source": [
    "mi_1 = mp.MultiIndexSet.from_degree(m, n, 1.0)\n",
    "grd_1 = mp.Grid(mi_1)\n",
    "mi_inf = mp.MultiIndexSet.from_degree(m, n, np.inf)\n",
    "grd_inf = mp.Grid(mi_inf)\n",
    "\n",
    "fig, axs = plt.subplots(nrows=1, ncols=3, figsize=(12, 4))\n",
    "\n",
    "axs[0].scatter(grd_1.unisolvent_nodes[:, 0], grd_1.unisolvent_nodes[:, 1], marker='x', color=\"black\")\n",
    "axs[0].set_xlabel(\"$x_1$\", fontsize=14);\n",
    "axs[0].set_ylabel(\"$x_2$\", fontsize=14);\n",
    "axs[0].set_xlim([-1.25, 1.25]);\n",
    "axs[0].set_ylim([-1.25, 1.25]);\n",
    "axs[0].set_title(rf\"m = {m}, n = {n}, p = 1.0\", fontsize=16);\n",
    "axs[0].tick_params(axis='both', which='major', labelsize=12)\n",
    "\n",
    "axs[1].scatter(grd.unisolvent_nodes[:, 0], grd.unisolvent_nodes[:, 1], marker='x', color=\"black\")\n",
    "axs[1].set_xlabel(\"$x_1$\", fontsize=14);\n",
    "axs[1].set_xlim([-1.25, 1.25]);\n",
    "axs[1].set_ylim([-1.25, 1.25]);\n",
    "axs[1].set_title(rf\"m = {m}, n = {n}, p = 2.0\", fontsize=16)\n",
    "axs[1].tick_params(axis='both', which='major', labelsize=12)\n",
    "\n",
    "axs[2].scatter(grd_inf.unisolvent_nodes[:, 0], grd_inf.unisolvent_nodes[:, 1], marker='x', color=\"black\")\n",
    "axs[2].set_xlabel(\"$x_1$\", fontsize=14);\n",
    "axs[2].set_xlim([-1.25, 1.25]);\n",
    "axs[2].set_ylim([-1.25, 1.25]);\n",
    "axs[2].set_title(rf\"m = {m}, n = {n}, p = $\\infty$\", fontsize=16);\n",
    "axs[2].tick_params(axis='both', which='major', labelsize=12)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e063e10-64b6-46bd-a0d4-581385e37350",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "### Evaluate the function at the unisolvent nodes\n",
    "\n",
    "An interpolating polynomial satisfies the condition that the polynomial values at the unisolvent nodes coincide with the value of the given function at the same nodes.\n",
    "Calling an instance of {py:class}`Grid <.core.grid.Grid>` with a given function evaluates the function at the unisolvent nodes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "753e09d5-36bc-43c0-94f2-bef85c7ac0ec",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "coeffs = grd(fun)\n",
    "coeffs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d2766b3-045b-44a3-9757-9ad540b4776d",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "```{note}\n",
    "Make sure that the given function accepts a two-dimensional array whose each column corresponds to the values per spatial dimension.\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f59a0a7-c8c7-48e2-8fcb-43ae21558ed1",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "### Create a polynomial in the Lagrange basis\n",
    "\n",
    "The function values at the unisolvent nodes are the same as the coefficients $c_{\\boldsymbol{\\alpha}}$ of a polynomial in the Lagrange basis:\n",
    "\n",
    "$$\n",
    "Q(\\boldsymbol{x}) = \\sum_{\\boldsymbol{\\alpha} \\in A_{m, n, p}} c_{\\mathrm{lag}, \\boldsymbol{\\alpha}} \\Psi_{\\mathrm{lag}, \\boldsymbol{\\alpha}}(\\boldsymbol{x}),\n",
    "$$\n",
    "\n",
    "where $A_{m, n, p}$ is the complete multi-index set and $\\Psi_{\\mathrm{lag}, \\boldsymbol{\\alpha}}$'s are the monomials of the Lagrange basis that satisfy:\n",
    "\n",
    "$$\n",
    "L_{\\boldsymbol{\\alpha}}(p_{\\boldsymbol{\\beta}}) = \\delta_{\\boldsymbol{\\alpha}, \\boldsymbol{\\beta}}, p_{\\boldsymbol{\\beta}} \\in P_{A_{m, n, p}},\n",
    "$$\n",
    "\n",
    "where $\\delta{\\cdot, \\cdots}$ denotes the Kronecker delta.\n",
    "\n",
    "To create a polynomial in the Lagrange basis from the given grid and coefficients, use the {py:meth}`from_grid() <.polynomials.lagrange_polynomial.LagrangePolynomial.from_grid>` class method of {py:class}`LagrangePolynomial <.polynomials.lagrange_polynomial.LagrangePolynomial>` class:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eb76ad24-9d95-4e19-afde-295409e8719b",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "lag_poly = mp.LagrangePolynomial.from_grid(grd, coeffs)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "87129795-5373-4ea5-a9df-74fe4dea11b2",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "### Transform to the Newton basis\n",
    "\n",
    "Just like the one-dimensional case, to do more with the polynomial in Minterpy, it must first be transformed to the Newton basis such that the polynomial is of the form:\n",
    "\n",
    "$$\n",
    "Q(\\boldsymbol{x}) = \\sum_{\\boldsymbol{\\alpha} \\in A_{m, n, p}} c_{\\mathrm{nwt}, \\boldsymbol{\\alpha}} \\, \\Psi_{\\mathrm{nwt}, \\boldsymbol{\\alpha}}(\\boldsymbol{x}),\n",
    "$$\n",
    "\n",
    "where $c_{\\mathrm{nwt}, \\boldsymbol{\\alpha}}$'s are the coefficients of the polynomial in the multidimensional Newton basis and $\\Psi_{\\mathrm{nwt}, \\boldsymbol{\\alpha}}$'s are the monomials of the Newton basis. The monomial associated with multi-index element $\\boldsymbol{\\alpha}$ is defined as follows:\n",
    "\n",
    "$$\n",
    "\\Psi_{\\mathrm{nwt}, \\boldsymbol{\\alpha}}(\\boldsymbol{x}) = \\prod_{j = 1}^m \\prod_{i = 0}^{\\alpha - 1} (x_j - p_{i, j}),\n",
    "$$\n",
    "\n",
    "where $p_{i, j}$'s are the interpolation points along dimension $j$ (i.e., the so-called {ref}`generating points / nodes <fundamentals/interpolation-at-unisolvent-nodes:Generating points>` which in multiple dimensions are not the same as the unisolvent nodes)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9d092ff-84cb-4208-81c0-5f5d3c08e99b",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "As before, to transform a polynomial in the Lagrange basis to a polynomial in the Newton basis, use the {py:class}`LagrangeToNewton <.transformations.lagrange.LagrangeToNewton>` class:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c59504d5-1b8b-493a-be09-09ff10614ef3",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "nwt_poly = mp.LagrangeToNewton(lag_poly)()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b27e9626-fa26-450c-ae04-9faf755c9b05",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "```{note}\n",
    "In the above statement, the first part of the call, `mp.LagrangeToNewton(lag_poly)`, creates a transformation instance that converts the given polynomial from the Lagrange basis to the Newton basis.\n",
    "\n",
    "The second call, which is made without any arguments, performs the transformation and returns the actual Newton polynomial instance.\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39888f01-83c8-4819-81d5-921f8d74336e",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "### Evaluate the polynomial\n",
    "\n",
    "Create a set of random query points in $[-1, 1]^2$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fa7c6503-cb82-4233-ab4d-5b06f4001f94",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "xx_test = -1 + 2 * np.random.rand(1000, 2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c2b19fc-6247-4937-946f-33c87246b8ea",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Then evaluate the original function at these points"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4457792c-93ca-4c2e-8c50-b71fbdcf035c",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "yy_test = fun(xx_test)\n",
    "yy_test[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02e87ee6-5e8a-492a-b3f7-49ae45cebe31",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Calling an instance of `NewtonPolynomial` at these query points evaluate the polynomial at the query points:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a789e2df-ba5b-460d-860c-f6eb54b0a4b6",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "yy_poly = nwt_poly(xx_test)\n",
    "yy_poly[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34683fa7-39af-4568-a302-d6fec1f6adec",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Note that the input array must have two columns because the polynomial is two dimension."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b674879-26bf-4177-88d1-1ffb6ca65f50",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "As expected, evaluating the polynomial on $1'000$ query points returns an array $1'000$ points:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6e3c8c53-456b-42db-959e-8edf001d71b9",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "yy_poly.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c9ddd34-07f1-41d5-a1f1-dc25cc10972a",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "We can compare the surface plot of the original function and the interpolating polynomial (with the interpolating points):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "98b65878-449a-4d4b-9ef3-fb44efc9f66d",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": [
     "hide-input"
    ]
   },
   "outputs": [],
   "source": [
    "# --- Create 2D data\n",
    "xx_1d = np.linspace(-1.0, 1.0, 250)[:, np.newaxis]\n",
    "mesh_2d = np.meshgrid(xx_1d, xx_1d)\n",
    "xx_2d = np.array(mesh_2d).T.reshape(-1, 2)\n",
    "yy_plot_test = fun(xx_2d)\n",
    "yy_plot_poly = nwt_poly(xx_2d)\n",
    "\n",
    "# --- Create two-dimensional plots\n",
    "fig, axs = plt.subplots(\n",
    "    nrows=1,\n",
    "    ncols=2,\n",
    "    figsize=(12, 4),\n",
    "    subplot_kw=dict(projection=\"3d\"),\n",
    "    layout=\"compressed\",\n",
    ")\n",
    "\n",
    "# Original function\n",
    "axs[0].plot_surface(\n",
    "    mesh_2d[0],\n",
    "    mesh_2d[1],\n",
    "    yy_plot_test.reshape(250, 250).T,\n",
    "    linewidth=0,\n",
    "    cmap=\"plasma\",\n",
    "    antialiased=False,\n",
    "    alpha=0.5\n",
    ")\n",
    "axs[0].set_xlabel(\"$x_1$\", fontsize=14)\n",
    "axs[0].set_ylabel(\"$x_2$\", fontsize=14)\n",
    "axs[0].set_title(\"Original function\", fontsize=16)\n",
    "axs[0].tick_params(axis='both', which='major', labelsize=12)\n",
    "\n",
    "# Interpolating polynomial\n",
    "axs[1].plot_surface(\n",
    "    mesh_2d[0],\n",
    "    mesh_2d[1],\n",
    "    yy_plot_poly.reshape(250, 250).T,\n",
    "    linewidth=0,\n",
    "    cmap=\"plasma\",\n",
    "    antialiased=False,\n",
    "    alpha=0.5\n",
    ")\n",
    "axs[1].set_xlabel(\"$x_1$\", fontsize=14)\n",
    "axs[1].set_ylabel(\"$x_2$\", fontsize=14)\n",
    "axs[1].set_title(\"Interpolating polynomial\", fontsize=16)\n",
    "axs[1].tick_params(axis='both', which='major', labelsize=12)\n",
    "axs[1].scatter(grd.unisolvent_nodes[:, 0], grd.unisolvent_nodes[:, 1], coeffs, color=\"k\");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06411e37-1215-4cad-8a94-640349459ce5",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "### Assess the accuracy of the polynomial\n",
    "\n",
    "As shown in the plot above, the chosen polynomial degree is not accurate enough to approximate the true function.\n",
    "\n",
    "The infinity norm provides a measure of the greatest error of the interpolant over the whole domain.\n",
    "The norm is defined as:\n",
    "\n",
    "$$\n",
    "\\lVert f - Q \\rVert_\\infty = \\sup_{-1 \\leq x \\leq 1} \\lvert f(x) - Q(x) \\rvert\n",
    "$$\n",
    "\n",
    "The infinity norm of $Q$ can be approximated using the $1'000$ testing points created above:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2d65d808-6c4f-407f-8aa8-f258cd329ddd",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "np.max(np.abs(yy_test - yy_poly))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a8fae93-4105-4bb5-a9c0-36f498acddcb",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "The number indicates that the interpolating polynomial with the choice of $n$ and $p$ is not yet converged."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a16d9b9-bf0b-491c-8c0c-ebc8060957fb",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "## Assess the empirical convergence of interpolating polynomials\n",
    "\n",
    "To assess the convergence of interpolating polynomials, you can once again resort to the high-level function `interpolate()` as a shortcut to the steps taken above.\n",
    "Let's investigate the convergence of interpolating polynomials with increasing polynomial degrees and three different choices of $l_p$-degrees:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7e6635e5-b298-4aff-90b2-54f3433e835a",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "poly_degrees = np.arange(0, 121, 4)\n",
    "lp_degrees = [1.0, 2.0, np.inf]\n",
    "yy_poly = np.empty((len(xx_test), len(poly_degrees), len(lp_degrees)))\n",
    "for i, n in enumerate(poly_degrees):\n",
    "    for j, p in enumerate(lp_degrees):\n",
    "        fx_interp = mp.interpolate(fun, spatial_dimension=2, poly_degree=n, lp_degree=p)\n",
    "        yy_poly[:, i, j] = fx_interp(xx_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8c5b70fc-2156-4625-ad7c-48a41845ee69",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "errors = np.max(np.abs(yy_test[:, np.newaxis, np.newaxis] - yy_poly), axis=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6787f41e-b600-4acc-abf9-6165b9d2324e",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "The convergence of the error is shown below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9ee33626-73af-4567-9ed3-d015089cbb39",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": [
     "hide-input"
    ]
   },
   "outputs": [],
   "source": [
    "fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(10, 5))\n",
    "\n",
    "# Convergence with respect to the polynomial degrees\n",
    "axs[0].plot(poly_degrees, errors[:, 0], '-x', label=\"$p = 1.0$\");\n",
    "axs[0].plot(poly_degrees, errors[:, 1], '-x', label=\"$p = 2.0$\");\n",
    "axs[0].plot(poly_degrees, errors[:, 2], '-x', label=\"$p = \\infty$\");\n",
    "axs[0].set_yscale(\"log\")\n",
    "axs[0].legend(fontsize=16);\n",
    "axs[0].set_xlabel(\"Polynomial degree ($n$)\", fontsize=14)\n",
    "axs[0].set_ylabel(r\"$|| f - Q ||_\\infty$\", fontsize=14)\n",
    "axs[0].tick_params(axis='both', which='major', labelsize=12)\n",
    "\n",
    "# Convergence with respect to the number of coefficients\n",
    "num_coeffs = np.zeros((len(poly_degrees), len(lp_degrees)))\n",
    "for i, n in enumerate(poly_degrees):\n",
    "    for j, p in enumerate(lp_degrees):\n",
    "        num_coeffs[i, j] = len(mp.MultiIndexSet.from_degree(m, n, p))\n",
    "\n",
    "axs[1].plot(num_coeffs[:, 0], errors[:, 0], '-x', label=\"$p = 1.0$\");\n",
    "axs[1].plot(num_coeffs[:, 1], errors[:, 1], '-x', label=\"$p = 2.0$\");\n",
    "axs[1].plot(num_coeffs[:, 2], errors[:, 2], '-x', label=\"$p = \\infty$\");\n",
    "axs[1].set_yscale(\"log\")\n",
    "axs[1].set_xscale(\"log\")\n",
    "axs[1].set_xlabel(\"Number of coefficients\", fontsize=14)\n",
    "axs[1].tick_params(axis='both', which='major', labelsize=12)\n",
    "\n",
    "fig.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85d8473f-5a52-499a-b0d8-c1913f9d57a6",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "The surface plots of the original function and the interpolating polynomial for $n = 100$ and $p = 2.0$ (which according to the plots above is numerically converged) are shown below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e36abda8-5414-4b47-adad-1366d2c2f047",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": [
     "hide-input"
    ]
   },
   "outputs": [],
   "source": [
    "from mpl_toolkits.axes_grid1 import make_axes_locatable\n",
    "\n",
    "# --- Create 2D data\n",
    "xx_1d = np.linspace(-1.0, 1.0, 250)[:, np.newaxis]\n",
    "mesh_2d = np.meshgrid(xx_1d, xx_1d)\n",
    "xx_2d = np.array(mesh_2d).T.reshape(-1, 2)\n",
    "yy_fun = fun(xx_2d)\n",
    "yy_poly = mp.interpolate(fun, 2, 128, 1.0)(xx_2d)\n",
    "\n",
    "# --- Create two-dimensional plots\n",
    "fig, axs = plt.subplots(\n",
    "    nrows=1,\n",
    "    ncols=2,\n",
    "    figsize=(12, 4),\n",
    "    subplot_kw=dict(projection=\"3d\"),\n",
    "    layout=\"compressed\",\n",
    ")\n",
    "\n",
    "# Original function\n",
    "axs[0].plot_surface(\n",
    "    mesh_2d[0],\n",
    "    mesh_2d[1],\n",
    "    yy_fun.reshape(250, 250).T,\n",
    "    linewidth=0,\n",
    "    cmap=\"plasma\",\n",
    "    antialiased=False,\n",
    "    alpha=0.5\n",
    ")\n",
    "axs[0].set_xlabel(\"$x_1$\", fontsize=14)\n",
    "axs[0].set_ylabel(\"$x_2$\", fontsize=14)\n",
    "axs[0].set_title(\"Original function\", fontsize=16)\n",
    "axs[0].tick_params(axis='both', which='major', labelsize=12)\n",
    "\n",
    "# Interpolating polynomial\n",
    "axs[1].plot_surface(\n",
    "    mesh_2d[0],\n",
    "    mesh_2d[1],\n",
    "    yy_poly.reshape(250, 250).T,\n",
    "    linewidth=0,\n",
    "    cmap=\"plasma\",\n",
    "    antialiased=False,\n",
    "    alpha=0.5\n",
    ")\n",
    "axs[1].set_xlabel(\"$x_1$\", fontsize=14)\n",
    "axs[1].set_ylabel(\"$x_2$\", fontsize=14)\n",
    "axs[1].set_title(\"Interpolating polynomial\", fontsize=16)\n",
    "axs[1].tick_params(axis='both', which='major', labelsize=12)"
   ]
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "## From Interpolant to polynomial\n",
    "\n",
    "As explained in the {doc}`previous tutorial </getting-started/1d-polynomial-interpolation>`, \n",
    "the callable produced by {py:func}`interpolate() <.interpolation.interpolate>`\n",
    "is not a Minterpy polynomial.\n",
    "\n",
    "There are convenient methods to represent the interpolant\n",
    "in one of the Minterpy polynomials.\n",
    "These methods are summarized in the table below.\n",
    "\n",
    "|                               Method                                |                    Return the interpolant as a polynomial in the...                     |\n",
    "|:-------------------------------------------------------------------:|:---------------------------------------------------------------------------------------:|\n",
    "|    {py:meth}`to_newton() <.interpolation.Interpolant.to_newton>`    |     {py:class}`NewtonPolynomial <.polynomials.newton_polynomial.NewtonPolynomial>`      |\n",
    "|  {py:meth}`to_lagrange() <.interpolation.Interpolant.to_lagrange>`  |  {py:class}`LagrangePolynomial <.polynomials.lagrange_polynomial.LagrangePolynomial>`   |\n",
    "| {py:meth}`to_canonical() <.interpolation.Interpolant.to_canonical>` | {py:class}`CanonicalPolynomial <.polynomials.canonical_polynomial.CanonicalPolynomial>` |\n",
    "| {py:meth}`to_chebyshev() <.interpolation.Interpolant.to_chebyshev>` | {py:class}`CanonicalPolynomial <.polynomials.chebyshev_polynomial.ChebyshevPolynomial>` |\n",
    "\n",
    "These bases will be the topic of {doc}`/getting-started/polynomial-bases-and-transformations`\n",
    "in-depth tutorial.\n",
    "\n",
    "For now to obtain the interpolating polynomial in the Newton basis, call:"
   ],
   "id": "532a5402311dab2d"
  },
  {
   "metadata": {},
   "cell_type": "code",
   "outputs": [],
   "execution_count": null,
   "source": "fx_interp.to_newton()",
   "id": "2387441ac00b1b8c"
  },
  {
   "cell_type": "markdown",
   "id": "5c77fc13-f267-4686-992d-48966a6be1dd",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "## Summary\n",
    "\n",
    "In this tutorial, you learned how to create a two-dimensional interpolating polynomial from scratch to approximate a given function then evaluate it at a set of query points in Minterpy.\n",
    "\n",
    "The steps are:\n",
    "\n",
    "1. Define a multi-index set\n",
    "2. Construct an interpolation grid\n",
    "3. Evaluate the given function on the grid points (i.e., the unisolvent nodes)\n",
    "4. Construct an interpolating polynomial in the Lagrange basis\n",
    "5. Transform the polynomial into the equivalent Newton basis\n",
    "\n",
    "As you observed, these steps mirror those from the {doc}`1d-polynomial-interpolation` tutorial.\n",
    "A few key points for multidimensional polynomials are:\n",
    "\n",
    "- you must specify the $l_p$-degree to fully define the multi-index set.\n",
    "- the function of interest should accept a two-dimensional array, where each row corresponds to a multidimensional point and each column correspondds to the value per dimension.\n",
    "- when evaluating an interpolating polynomial, the input should also match this two-dimensional array structure.\n",
    "\n",
    "While the example here is two-dimensional, the same principles apply to polynomials in higher dimensions.\n",
    "\n",
    "Finally, you saw that for the chosen function, an interpolating polynomial approximate it with sufficiently high polynomial degree. \n",
    "\n",
    "---\n",
    "\n",
    "You've now learned how to construct and work with interpolating polynomials in Minterpy, whether in one or multiple dimensions.\n",
    "\n",
    "The next two tutorials will explore additional features and capabilities of Minterpy polynomials."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
