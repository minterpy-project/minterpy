{
 "cells": [
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "# Multiply `Grid` Instances",
   "id": "ebf1ed09291f1ec4"
  },
  {
   "cell_type": "code",
   "id": "initial_id",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import minterpy as mp\n",
    "import numpy as np"
   ],
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "This guide demonstrates how to multiply instances of `Grid` and the expected outcome of such an operation. The multiplication between two instances of `Grid` may be carried out via the operator `*`.\n",
    "\n",
    "The result of a multiplication between two instances of `Grid` is another instance of `Grid` whose underlying multi-index set is the product of the index sets of the operands. This `Grid` instance\n",
    "can support interpolation polynomials that are the product of polynomials that live on either `Grid` operands.\n",
    "\n",
    "To know more about the multi-index set multiplication in Minterpy, see the {doc}`relevant example </how-to/multi-index-set/multi-index-set-multiply>`.\n",
    "\n",
    "When multiplying two instances of `Grid` note the following caveats:\n",
    "\n",
    "- If a generating function is defined in both instances, then the instances can be multiplied only if the generating functions are compatible, i.e., they are the same function.\n",
    "  defined in both instances.\n",
    "- Without a generating function, two instances can be multiplied only if the generating\n",
    "  points are compatible, i.e., they have the same values up to a common dimension (or columns)."
   ],
   "id": "8eee69b4e0b6b159"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "## Example: Instances with the same dimension\n",
    "\n",
    "As a motivating example, consider multiplying two two-dimensional interpolation grids:\n",
    "\n",
    "- The first grid has a complete multi-index set with respect to a polynomial degree $2$ and $l_p$-degree $2.0$\n",
    "- the second grid has a complete multi-index set with respect to a polynomial degree $3$ and $l_p$-degree $1.0$.\n",
    "\n",
    "Both interpolation grids have points according to the Leja-ordered Chebyshev-Lobatto points (the default in Minterpy)."
   ],
   "id": "c35b5937514ac341"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "First, create the instances of `Grid` according to the above specification:",
   "id": "a957b70b132d8a14"
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": [
    "grd_1 = mp.Grid.from_degree(2, 2, 2.0)\n",
    "grd_2 = mp.Grid.from_degree(2, 3, 1.0)"
   ],
   "id": "db1a4a8e1f5a1401",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "The unisolvent nodes that correspond to these are shown below:",
   "id": "cce000f1c44447d0"
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": [
    "fig, axs = plt.subplots(1, 2, figsize=(10, 5))\n",
    "axs[0].scatter(grd_1.unisolvent_nodes[:, 0], grd_1.unisolvent_nodes[:, 1])\n",
    "axs[1].scatter(grd_2.unisolvent_nodes[:, 0], grd_2.unisolvent_nodes[:, 1]);"
   ],
   "id": "52b4e06df44476ee",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "The product `Grid` can be obtained as follows:",
   "id": "2045ac6a4bdef733"
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": "grd_prod = grd_1 * grd_2",
   "id": "48031bfe16bf5977",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "And the resulting unisolvent nodes are shown below:",
   "id": "f465b452d4dc1629"
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": "plt.scatter(grd_prod.unisolvent_nodes[:, 0], grd_prod.unisolvent_nodes[:, 1]);",
   "id": "b4988b4955898ae1",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "Notice that the underlying multi-index set follows the convention adopted\n",
    "for the multiplication of `MultiIndexSet`:"
   ],
   "id": "8ecbdf5e3009f662"
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": "print(grd_prod.multi_index)",
   "id": "d46a03db9a4a102b",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "## Example: Instances with different dimension",
   "id": "43861bd48ea0ac22"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "Grids of different spatial dimensions may also be multiplied with each other.\n",
    "For instance, consider multiplying the following interpolation grids:\n",
    "\n",
    "- the first grid is a one-dimensional grid whose a complete multi-index set\n",
    "  with respect to a polynomial degree $4$\n",
    "- the second grid is a two-dimensional grid whose a complete multi-index set\n",
    "  with respect to a polynomial degree $2$ and $l_p$-degree $1.0$.\n",
    "\n",
    "Both interpolation grids have points according to the Leja-ordered Chebyshev-Lobatto points (the default in Minterpy).\n",
    "\n",
    "The product grid will have the same spatial dimension as that of the operands with the largest dimension."
   ],
   "id": "a69d43c9bba2b711"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "First, create the two instances of `Grid` following the above specification:",
   "id": "c239ce03b24c97af"
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": [
    "grd_1 = mp.Grid.from_degree(1, 4, 1.0)\n",
    "grd_2 = mp.Grid.from_degree(2, 2, 1.0)"
   ],
   "id": "22fd838ae62d72b3",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "The unisolvent nodes that correspond to these are shown below:",
   "id": "c85bbec98128b372"
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": [
    "fig, axs = plt.subplots(1, 2, figsize=(10, 5))\n",
    "axs[0].scatter(grd_1.unisolvent_nodes[:, 0], np.zeros(len(grd_1.multi_index)))\n",
    "axs[1].scatter(grd_2.unisolvent_nodes[:, 0], grd_2.unisolvent_nodes[:, 1]);"
   ],
   "id": "d44a56eb54311f6",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "The product `Grid` can be obtained as follows:",
   "id": "5f8b670928f30100"
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": "grd_prod = grd_1 * grd_2",
   "id": "b68a68bb341a913f",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "And the resulting unisolvent nodes are shown below:",
   "id": "82934e9d6869b878"
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": "plt.scatter(grd_prod.unisolvent_nodes[:, 0], grd_prod.unisolvent_nodes[:, 1]);",
   "id": "396c7c36da87d464",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "As expected the resulting `Grid` is two-dimensional according to the largest dimension of the operands. The resulting multi-index set is shown below:",
   "id": "175a5cbcd1a49040"
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": "print(grd_prod.multi_index)",
   "id": "163bc353e3fa7708",
   "outputs": [],
   "execution_count": null
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
