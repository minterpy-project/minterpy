{
 "cells": [
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "# Create a Grid from an Array of Generating Points",
   "id": "12e4f1e73ba755f"
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": [
    "import numpy as np\n",
    "import minterpy as mp\n",
    "import matplotlib.pyplot as plt"
   ],
   "id": "7937e29866199fe5",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "Minterpy interpolating polynomials (i.e., in the Lagrange or Newton basis)\n",
    "lives on a grid that holds the so-called _unisolvent nodes_.\n",
    "An interpolating multi-dimensional polynomial of a given multi-index set of\n",
    "exponents is uniquely\n",
    "determined on the corresponding unisolvent nodes.\n",
    "\n",
    "An instance of `Grid` can be constructed via different constructors:\n",
    "\n",
    "- {py:meth}`.Grid.from_points`: create an instance with an array of generating points (this page)\n",
    "- {py:meth}`.Grid.from_function`: create an instance with a generating function (see the {doc}`example <grid-create-from-function>`)\n",
    "- {py:meth}`.Grid.from_degree`: create an instance with a complete multi-index set (see the {doc}`example <grid-create-from-degree>`)\n",
    "- {py:meth}`.Grid.from_value_set`: create an instance based on an array of generating values (see the {doc}`example <grid-create-from-value-set>`)\n",
    "- {py:class}`.Grid`: the default constructor (see the {doc}`example <grid-create-default-constructor>`)\n",
    "\n",
    "This guide provides an example on how to construct a `Grid` instance based\n",
    "on a given array of generating points using the `from_points()` method."
   ],
   "id": "c3a659532557a7fc"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "## About generating points\n",
    "\n",
    "Valid generating points to construct an instance of `Grid` are given as\n",
    "a two-dimensional array of floats that must additionally satisfy\n",
    "the following conditions:\n",
    "\n",
    "- the shape must be $(n + 1, m)$ where $n$ is the maximum polynomial degree\n",
    "  across all dimensions and $m$ is the spatial dimension. Each column of the\n",
    "  array is the one-dimensional interpolation points associated with that\n",
    "  dimension.\n",
    "- each column of the array must have unique values (no repeats).\n",
    "- the number of rows of the array must be equal to or larger than the maximum\n",
    "  exponents of the grid's multi-index set in any dimension."
   ],
   "id": "d9070443d6eacf2b"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "## About `from_points()` factory method\n",
    "\n",
    "The method `from_points()` of the `Grid` class returns an instance of `Grid`\n",
    "based on a given array of generating points.\n",
    "\n",
    "The method accepts two mandatory arguments, namely, the multi-index set\n",
    "of exponents that defines the polynomials that grid can support,\n",
    "and the generating points as required by the multi-index set.\n",
    "\n",
    "As explained above, the array of generating points must satisfy\n",
    "several conditions for it to be valid.\n",
    "\n",
    "The `from_points()` method is a shortcut to create a grid with a given multi-index set\n",
    "and a specific array of generating points."
   ],
   "id": "b833565eeda2390f"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "## Example: Two-dimensional interpolation grid\n",
    "\n",
    "Create an interpolation grid in $[-1, 1]^2$ to support two-dimensional\n",
    "polynomials having a multi-index set \n",
    "$A = \\{ (0, 0), (1, 0), (2, 0), (0, 1), (1, 1), (0, 2), (1, 2), (0, 3), (1, 3) \\}$\n",
    "(defined with respect to $l_p$-degree $1.0$).\n",
    "The interpolation grid has Leja-ordered Chebyshev-Lobatto points in the first dimension\n",
    "and the Leja points in the second dimension."
   ],
   "id": "8944e62814c4e6d7"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "### Multi-index set\n",
    "\n",
    "Create an instance of `MultiIndexSet` following the above specification:"
   ],
   "id": "57b9c7058ebfaf3"
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": [
    "exponents = np.array([\n",
    "    [0, 0],\n",
    "    [1, 0],\n",
    "    [2, 0],\n",
    "    [0, 1],\n",
    "    [1, 1],\n",
    "    [0, 2],\n",
    "    [1, 2],\n",
    "    [0, 3],\n",
    "    [1, 3],\n",
    "])"
   ],
   "id": "602e91c691ef23ab",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": "mi = mp.MultiIndexSet(exponents, lp_degree=1.0)",
   "id": "b432150f73a969f1",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": "print(mi)",
   "id": "522b98eccba7322c",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "### Generating points\n",
    "\n",
    "The generating points as required by the grid are given as follows:"
   ],
   "id": "b1a31562c4afbd8b"
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": [
    "gen_points = np.array([\n",
    "    [-1., 0. ],\n",
    "    [ 1., -1. ],\n",
    "    [-0.5, 1.0],\n",
    "    [ 0.5, 0.57735035],\n",
    "])"
   ],
   "id": "340c17de85d0e703",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "Because the maximum exponents in the multi-indices across all dimensions is $3$,\n",
    "the required number of points is $3 + 1 = 4$ per column.\n",
    "\n",
    "As shown above, the distribution of points per column does not have to be identical.\n",
    "In this particular case, each column is based on different one-dimensional\n",
    "interpolation points.\n",
    "The generating points, however, must have unique values per column. "
   ],
   "id": "9c078b5044591939"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "### Grid instance\n",
    "\n",
    "An instance of `Grid` given the multi-index set and the array of generating points\n",
    "can  be constructed via `from_points()` method as follows:"
   ],
   "id": "38b1abd452d4dffe"
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": "grd = mp.Grid.from_points(mi, gen_points)",
   "id": "6dbe3419f4ccae9c",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "The grid has the following unisolvent nodes:",
   "id": "5bfd42efddc2c05f"
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": "print(grd.unisolvent_nodes)",
   "id": "bed1d9eefa3143d3",
   "outputs": [],
   "execution_count": null
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "The two-dimensional interpolation grid is plotted below:",
   "id": "cfe55ab8e02b40c7"
  },
  {
   "metadata": {},
   "cell_type": "code",
   "source": [
    "plt.scatter(grd.unisolvent_nodes[:, 0], grd.unisolvent_nodes[:, 1])\n",
    "plt.xlabel(\"$x_1$\", fontsize=16)\n",
    "plt.ylabel(\"$x_2$\", fontsize=16);"
   ],
   "id": "be3ab3fb62f8f00",
   "outputs": [],
   "execution_count": null
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
