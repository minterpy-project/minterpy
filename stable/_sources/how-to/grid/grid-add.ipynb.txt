{
 "cells": [
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "# Add Exponents to a Grid",
   "id": "2404718c61a937a7"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-07-22T08:47:40.015972Z",
     "start_time": "2024-07-22T08:47:36.186669Z"
    }
   },
   "cell_type": "code",
   "source": [
    "import minterpy as mp\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ],
   "id": "f2c3ddba60461e80",
   "outputs": [],
   "execution_count": 1
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "An additional multi-index exponent or a set of multi-indices may be added to a\n",
    "`Grid` instance. A new instance of `Grid` is returned with the expanded\n",
    "underlying multi-index set. The `Grid` may then support a larger space of interpolant polynomials.\n",
    "\n",
    "The logic behind adding elements to a grid in Minterpy follows the logic of adding the elements to a multi-index set. See {doc}`/how-to/multi-index-set/multi-index-set-add` for more details."
   ],
   "id": "ff6208b8e1066e75"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "## Motivating example\n",
    "\n",
    "Consider a two-dimensional Leja-ordered Chebyshev-Lobatto interpolation grid whose underlying multi-index set is a complete\n",
    "set of spatial dimension $2$, polynomial degree $2$, and $l_p$-degree $1.0$:"
   ],
   "id": "fe1f0ed1c4af8ef1"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-07-22T08:47:40.049191Z",
     "start_time": "2024-07-22T08:47:40.033309Z"
    }
   },
   "cell_type": "code",
   "source": "grd = mp.Grid.from_degree(2, 2, 1.0)",
   "id": "1c862d936494498a",
   "outputs": [],
   "execution_count": 2
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "## Add an exponent to a `Grid` instance\n",
    "\n",
    "The method `add_exponents()` inserts an exponent to the underlying multi-index set of a `Grid` instsance. For a single multi-index element, the element may be specified as a one-dimensional array with the spatial dimension as the length.\n",
    "\n",
    "For instance, to add a new exponent $(3, 0)$:"
   ],
   "id": "8ba6f50ad94076d8"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-07-22T08:47:40.128607Z",
     "start_time": "2024-07-22T08:47:40.093312Z"
    }
   },
   "cell_type": "code",
   "source": "grd_added_1 = grd.add_exponents(np.array([3, 0]))",
   "id": "39714551639d251f",
   "outputs": [],
   "execution_count": 3
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "Compare the unisolvent nodes before and after adding the exponent:",
   "id": "a67bb456603231e2"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-07-22T08:48:30.474642Z",
     "start_time": "2024-07-22T08:48:30.148614Z"
    }
   },
   "cell_type": "code",
   "source": [
    "fig, axs = plt.subplots(1, 2, figsize=(10, 5))\n",
    "axs[0].scatter(grd.unisolvent_nodes[:, 0], grd.unisolvent_nodes[:, 1])\n",
    "axs[1].scatter(\n",
    "    grd_added_1.unisolvent_nodes[:, 0],\n",
    "    grd_added_1.unisolvent_nodes[:, 1],\n",
    ");"
   ],
   "id": "375c0a4279feaf1f",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 1000x500 with 2 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 5
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "Notice that now the grid may support polynomial up to dimension $3$ in the first dimension.",
   "id": "65091a7462ae7358"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-07-22T08:50:18.322136Z",
     "start_time": "2024-07-22T08:50:18.300335Z"
    }
   },
   "cell_type": "code",
   "source": "grd.multi_index",
   "id": "2b6bdb3f8686d1e8",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MultiIndexSet(\n",
       "  array([[0, 0],\n",
       "         [1, 0],\n",
       "         [2, 0],\n",
       "         [0, 1],\n",
       "         [1, 1],\n",
       "         [0, 2]]),\n",
       "  lp_degree=1.0\n",
       ")"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 6
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "## Add a set of exponents to a `Grid` instance\n",
    "\n",
    "The method `add_exponents()` also supports adding multiple multi-index exponents to a `Grid` instance. The added components must be specified as a two-dimensional integer array with the spatial dimension as the number of columns.\n",
    "\n",
    "For instance, to add the exponents $\\{ (3, 0),  (2, 1), (0, 3) \\}$:"
   ],
   "id": "fe4a3a85dd09e2f0"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-07-22T08:52:51.636955Z",
     "start_time": "2024-07-22T08:52:51.563531Z"
    }
   },
   "cell_type": "code",
   "source": [
    "grd_added_2 = grd.add_exponents(\n",
    "    np.array([[3, 0], [2, 1], [0, 3]])\n",
    ")"
   ],
   "id": "c4e499c00b8c139e",
   "outputs": [],
   "execution_count": 10
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "Compare the unisolvent nodes before and after adding the new multi-index elements:",
   "id": "4f636af02663eec0"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-07-22T08:53:24.841404Z",
     "start_time": "2024-07-22T08:53:24.604167Z"
    }
   },
   "cell_type": "code",
   "source": [
    "fig, axs = plt.subplots(1, 2, figsize=(10, 5))\n",
    "axs[0].scatter(grd.unisolvent_nodes[:, 0], grd.unisolvent_nodes[:, 1])\n",
    "axs[1].scatter(\n",
    "    grd_added_2.unisolvent_nodes[:, 0],\n",
    "    grd_added_2.unisolvent_nodes[:, 1],\n",
    ");"
   ],
   "id": "853991ece202f1d",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 1000x500 with 2 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 12
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
