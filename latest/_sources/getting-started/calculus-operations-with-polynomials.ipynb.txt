{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4f44cdf37aadcff5",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "# Basic Calculus Operations with Polynomials"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c26c295879e98b28",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "So far, you've learned how to construct interpolating polynomials in both {doc}`one <1d-polynomial-interpolation>` and {doc}`multiple dimensions <md-polynomial-interpolation>`.\n",
    "You've also explored the basic {doc}`arithmetic operations <arithmetic-operations-with-polynomials>` supported by Minterpy polynomials.\n",
    "\n",
    "In this in-depth tutorial, you'll learn about the basic calculus operations that can be performed with Minterpy polynomials."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8fd381f9-68ea-4dd3-a055-85c8cadcd170",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "As usual, before you begin, you'll need to import the necessary packages to follow along with this guide."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1562e776-f727-4ab0-968e-8f798ec9729b",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import minterpy as mp\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea4cacd9-7afd-46af-bf13-582014249a75",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "## Motivating function\n",
    "\n",
    "Consider the following two-dimensional function:\n",
    "\n",
    "$$\n",
    "\\begin{align}\n",
    "\t\\mathcal{M}(\\boldsymbol{x}) = & 0.75 \\exp{\\left( -0.25 \\left( (x_1 - 2)^2 + (x_2 - 2)^2 \\right) \\right) } \\\\\n",
    "                                  & + 0.75 \\exp{\\left( -1.00 \\left( \\frac{(x_1 + 1)^2}{49} + \\frac{(x_2 + 1)^2}{10} \\right) \\right)} \\\\\n",
    "\t\t\t\t\t\t\t\t  & + 0.50 \\exp{\\left( -0.25 \\left( (x_1 - 7)^2 + (x_2 - 3)^2 \\right) \\right)} \\\\\n",
    "\t\t\t\t\t\t\t\t  & - 0.20 \\exp{\\left( -1.00 \\left( (x_1 - 4)^2 + (x_2 - 7)^2 \\right) \\right)} \\\\\n",
    "\\end{align}\n",
    "$$\n",
    "\n",
    "where $\\boldsymbol{x} = (x_1, x_2) \\in [-1, 1]^2$."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "429a1f91-4193-499e-a2c1-d9bc3f287306",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "```{note}\n",
    "This function is known in the literature as the Franke function[^franke]. Here, however, the domain has been redefined to be $[-1, 1]^2$ instead of $[0, 1]^2$.\n",
    "\n",
    "[^franke]: Richard Franke, \"A critical comparison of some methods for interpolation of scattered data,\" Naval Postgraduate School, Monterey, Canada, Technical Report No. NPS53-79-003, 1979. URL: https://core.ac.uk/reader/36727660\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6562028-ef6b-45da-9ca6-21a147cac285",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "The function can be defined in Python as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "51880cd0-08f6-4f11-be3d-4f6ab74e99e3",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def fun(xx: np.ndarray):\n",
    "    xx0 = 9 * xx[:, 0]\n",
    "    xx1 = 9 * xx[:, 1]\n",
    "\n",
    "    # Compute the (first) Franke function\n",
    "    term_1 = 0.75 * np.exp(-0.25 * ((xx0 - 2) ** 2 + (xx1 - 2) ** 2))\n",
    "    term_2 = 0.75 * np.exp(\n",
    "        -1.00 * ((xx0 + 1) ** 2 / 49.0 + (xx1 + 1) ** 2 / 10.0)\n",
    "    )\n",
    "    term_3 = 0.50 * np.exp(-0.25 * ((xx0 - 7) ** 2 + (xx1 - 3) ** 2))\n",
    "    term_4 = 0.20 * np.exp(-1.00 * ((xx0 - 4) ** 2 + (xx1 - 7) ** 2))\n",
    "\n",
    "    yy = term_1 + term_2 + term_3 - term_4\n",
    "\n",
    "    return yy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "607dfb11-6dd0-4706-ab8c-123c5685e2e7",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "The surface and contour plots of the function are shown below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "753dd9d01e17888c",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": [
     "hide-input"
    ]
   },
   "outputs": [],
   "source": [
    "from mpl_toolkits.axes_grid1 import make_axes_locatable\n",
    "\n",
    "# --- Create 2D data\n",
    "xx_1d = np.linspace(-1.0, 1.0, 500)[:, np.newaxis]\n",
    "mesh_2d = np.meshgrid(xx_1d, xx_1d)\n",
    "xx_2d = np.array(mesh_2d).T.reshape(-1, 2)\n",
    "yy_2d = fun(xx_2d)\n",
    "\n",
    "# --- Create two-dimensional plots\n",
    "fig = plt.figure(figsize=(10, 5))\n",
    "\n",
    "# Surface\n",
    "axs_1 = plt.subplot(121, projection='3d')\n",
    "axs_1.plot_surface(\n",
    "    mesh_2d[0],\n",
    "    mesh_2d[1],\n",
    "    yy_2d.reshape(500, 500).T,\n",
    "    linewidth=0,\n",
    "    cmap=\"plasma\",\n",
    "    antialiased=False,\n",
    "    alpha=0.5\n",
    ")\n",
    "axs_1.set_xlabel(\"$x_1$\", fontsize=14)\n",
    "axs_1.set_ylabel(\"$x_2$\", fontsize=14)\n",
    "axs_1.set_zlabel(\"$f(x_1, x_2)$\", fontsize=14)\n",
    "axs_1.set_title(\"Surface plot\", fontsize=14)\n",
    "axs_1.tick_params(axis='both', which='major', labelsize=12)\n",
    "\n",
    "# Contour\n",
    "axs_2 = plt.subplot(122)\n",
    "cf = axs_2.contourf(\n",
    "    mesh_2d[0], mesh_2d[1], yy_2d.reshape(500, 500).T, cmap=\"plasma\"\n",
    ")\n",
    "axs_2.set_xlabel(\"$x_1$\", fontsize=14)\n",
    "axs_2.set_ylabel(\"$x_2$\", fontsize=14)\n",
    "axs_2.set_title(\"Contour plot\", fontsize=14)\n",
    "divider = make_axes_locatable(axs_2)\n",
    "cax = divider.append_axes('right', size='5%', pad=0.05)\n",
    "fig.colorbar(cf, cax=cax, orientation='vertical')\n",
    "axs_2.axis('scaled')\n",
    "axs_2.tick_params(axis='both', which='major', labelsize=12)\n",
    "\n",
    "fig.tight_layout(pad=6.0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a126916f-5a52-46fd-9285-9cffd3a1e7d1",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "You can construct a (Newton) polynomial that approximates the above function with the following:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7e969d20-460b-470c-9d9f-c0eb29669424",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Multi-index set of polynomial degree\n",
    "mi = mp.MultiIndexSet.from_degree(2, 75, 1.0)\n",
    "# Interpolation grid\n",
    "grd = mp.Grid(mi)\n",
    "# Coefficients of the Lagrange polynomial\n",
    "coeffs = grd(fun)\n",
    "# Lagrange polynomial given grid and coefficients\n",
    "lag_poly = mp.LagrangePolynomial.from_grid(grd, coeffs)\n",
    "# Transformation to the Newton basis\n",
    "poly = mp.LagrangeToNewton(lag_poly)()                 "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069c4b9f-e29d-43f6-a985-0b4e6ab17ed5",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Verify if the interpolating polynomial has the sufficient accuracy by estimating its infinity norm:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5c474aaf-8a07-455a-b23c-7063544d001b",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "xx_test = -1 + 2 * np.random.rand(10000, 2)\n",
    "yy_test = fun(xx_test)\n",
    "yy_poly = poly(xx_test)\n",
    "print(np.max(np.abs(yy_poly - yy_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc6395c3-6cff-49ff-9062-e0f05ddb2e78",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "## Integration\n",
    "\n",
    "Minterpy polynomials support definite integration via the method {py:meth}`integrate_over() <.polynomials.newton_polynomial.NewtonPolynomial.integrate_over>`.\n",
    "\n",
    "Specifically, calling the method on a polynomial computes the following expression:\n",
    "\n",
    "$$\n",
    "I[Q] = \\int_{\\Omega} Q(\\boldsymbol{x}) \\, d\\boldsymbol{x},\n",
    "$$\n",
    "\n",
    "where $\\Omega$ is the domain of the polynomial which in this case is $[-1, 1]^2$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e8617dce-65ad-408f-bbad-f7c3f964eb43",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "poly.integrate_over()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1269c3e-2092-4089-90b0-c2200f287dd1",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "```{note}\n",
    "Instances of most polynomial bases in Minterpy support the method `integrate_over()`; if the method is not yet implemented for a particular basis then an exception will be raised.\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7c44656-7045-4d7b-8cc4-6503897b9d03",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "To specify custom bounds for definite integration in Minterpy, you can pass a list of lists where each inner list contains the lower and upper bounds for each dimension.\n",
    "This allows you to compute integrals over particular regions of interest.\n",
    "\n",
    "For instance, to compute:\n",
    "\n",
    "$$\n",
    "\\int_{-0.5}^{0.5} \\int_{-0.25}^{0.75} Q(\\boldsymbol{x}) \\, dx_2 dx_1,\n",
    "$$\n",
    "\n",
    "you would specify the bounds for each dimension as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a95c60b3-2be8-498f-8d7a-0e6ef572ba71",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "poly.integrate_over(bounds=[[-0.5, 0.5], [-0.25, 0.75]])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5318e34-5a0c-491a-8b57-02397e755976",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "## Differentiation\n",
    "\n",
    "Minterpy polynomials also supports differentiation via two methods:\n",
    "\n",
    "- {py:meth}`partial_diff() <.polynomials.newton_polynomial.NewtonPolynomial.partial_diff>`\n",
    "- {py:meth}`diff() <.polynomials.newton_polynomial.NewtonPolynomial.diff>`"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0426574-5736-492b-9457-26b8a8a847d9",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "```{note}\n",
    "Just like definite integration, instances of Minterpy polynomial bases may or may not support the methods; if the method is not yet implemented for a particular basis then an exception will be raised.\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3dca7a18-160d-45a0-aacb-8d486be070ec",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "The method {py:meth}`partial_diff() <.polynomials.newton_polynomial.NewtonPolynomial.partial_diff>` accepts two integer arguments: the spatial dimension specification and the order of derivative.\n",
    "\n",
    "See the following table for examples.\n",
    "\n",
    "|          Command          | Expression                            |\n",
    "|:-------------------------:|:-------------------------------------:|\n",
    "| `poly.partial_diff(0)`    | $\\frac{\\partial Q}{\\partial x_1}$     |\n",
    "| `poly.partial_diff(0, 1)` | $\\frac{\\partial Q}{\\partial x_1}$     |\n",
    "| `poly.partial_diff(0, 2)` | $\\frac{\\partial^2 Q}{\\partial x_1^2}$ |\n",
    "| `poly.partial_diff(1, 3)` | $\\frac{\\partial^3 Q}{\\partial x_2^3}$ |\n",
    "\n",
    "The second argument is optional; if not specified then it will be set to $1$ (i.e., first order of derivative)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f165a6d-60d1-4a52-aff3-8bf8d8e4afb8",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "```{note}\n",
    "The spatial dimension specification starts with $0$, i.e., $0$ is index for the first spatial dimension.\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5c27b6f-d76f-4679-991d-51a7501b17f3",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "Calling `partial_diff()` on an instance of polynomial returns another instance of polynomial.\n",
    "\n",
    "For instance, to obtain the polynomial $\\frac{\\partial Q}{\\partial x_1}$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8a889cec-d479-4b47-b3e7-4d2afcfc9f37",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "poly_diff_0_1 = poly.partial_diff(0)\n",
    "poly_diff_0_1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff9d50af-3fc5-43a3-9c80-770525257b49",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "or the polynomial $\\frac{\\partial Q}{\\partial x_2}$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a25b1bd-f249-4f15-9ae6-c5c1e35d5abb",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "poly_diff_1_1 = poly.partial_diff(1)\n",
    "poly_diff_1_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0bb6d7ad-d5df-4f55-a7e8-ec275335c42b",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": [
     "hide-input"
    ]
   },
   "outputs": [],
   "source": [
    "# --- Create 2D data\n",
    "xx_1d = np.linspace(-1.0, 1.0, 500)[:, np.newaxis]\n",
    "mesh_2d = np.meshgrid(xx_1d, xx_1d)\n",
    "xx_2d = np.array(mesh_2d).T.reshape(-1, 2)\n",
    "yy_diff_0_1 = poly_diff_0_1(xx_2d)\n",
    "yy_diff_1_1 = poly_diff_1_1(xx_2d)\n",
    "\n",
    "# --- Create two-dimensional plots\n",
    "fig, axs = plt.subplots(\n",
    "    nrows=1,\n",
    "    ncols=2,\n",
    "    figsize=(12, 4),\n",
    "    subplot_kw=dict(projection=\"3d\"),\n",
    "    layout=\"compressed\",\n",
    ")\n",
    "\n",
    "# Original function\n",
    "axs[0].plot_surface(\n",
    "    mesh_2d[0],\n",
    "    mesh_2d[1],\n",
    "    yy_diff_0_1.reshape(500, 500).T,\n",
    "    linewidth=0,\n",
    "    cmap=\"plasma\",\n",
    "    antialiased=False,\n",
    "    alpha=0.5\n",
    ")\n",
    "axs[0].set_xlabel(\"$x_1$\", fontsize=14)\n",
    "axs[0].set_ylabel(\"$x_2$\", fontsize=14)\n",
    "axs[0].set_title(\"$\\\\frac{\\\\partial Q}{\\\\partial x_1}$\", fontsize=16)\n",
    "axs[0].tick_params(axis='both', which='major', labelsize=12)\n",
    "\n",
    "# Interpolating polynomial\n",
    "axs[1].plot_surface(\n",
    "    mesh_2d[0],\n",
    "    mesh_2d[1],\n",
    "    yy_diff_1_1.reshape(500, 500).T,\n",
    "    linewidth=0,\n",
    "    cmap=\"plasma\",\n",
    "    antialiased=False,\n",
    "    alpha=0.5\n",
    ")\n",
    "axs[1].set_xlabel(\"$x_1$\", fontsize=14)\n",
    "axs[1].set_ylabel(\"$x_2$\", fontsize=14)\n",
    "axs[1].set_title(\"$\\\\frac{\\\\partial Q}{\\\\partial x_2}$\", fontsize=16)\n",
    "axs[1].tick_params(axis='both', which='major', labelsize=12)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be99f67e-e8dd-4fb7-a4fd-f80e193c5cd2",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "The method {py:meth}`diff() <.polynomials.newton_polynomial.NewtonPolynomial.diff>` allows you to specify the order of derivative for each spatial dimension simultaneously by passing a list or NumPy array.\n",
    "\n",
    "See the following table for examples.\n",
    "\n",
    "|          Command      | Expression                                         |\n",
    "|:---------------------:|:--------------------------------------------------:|\n",
    "| `poly.diff([1, 1])`   | $\\frac{\\partial^2 Q}{\\partial x_1 \\partial x_2}$   |\n",
    "| `poly.diff([0, 1])`   | $\\frac{\\partial Q}{\\partial x_2}$                  |\n",
    "| `poly.diff([1, 2])`   | $\\frac{\\partial^3 Q}{\\partial x_1 \\partial x_2^2}$ |\n",
    "| `poly.diff([3, 1])`   | $\\frac{\\partial^4 Q}{\\partial x_1^3 \\partial x_2}$ |"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b0d386a-44ec-4948-afc9-f23f201a3530",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "For instance, to obtain the polynomial $\\frac{\\partial^2 Q}{\\partial x_1 \\partial x_2}$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fd813fb1-ca48-4c4c-9286-2e5be05c44fd",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "poly_diff_0_1_1_1 = poly.diff([1, 1])\n",
    "poly_diff_0_1_1_1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85e3cf1a-3cd7-4e5c-81c8-9c2509fece2c",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "or the polynomial $\\frac{\\partial^3 Q}{\\partial x_1^2 \\partial x_2}$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0b5f3554-7338-48d8-bfa6-4d02aac39b1b",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "poly_diff_0_2_1_1 = poly.diff([2, 1])\n",
    "poly_diff_0_2_1_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c77b975c-41ab-44eb-8842-ace02cbd965c",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": [
     "hide-input"
    ]
   },
   "outputs": [],
   "source": [
    "# --- Create 2D data\n",
    "xx_1d = np.linspace(-1.0, 1.0, 500)[:, np.newaxis]\n",
    "mesh_2d = np.meshgrid(xx_1d, xx_1d)\n",
    "xx_2d = np.array(mesh_2d).T.reshape(-1, 2)\n",
    "yy_diff_0_1_1_1 = poly_diff_0_1_1_1(xx_2d)\n",
    "yy_diff_0_2_1_1 = poly_diff_0_2_1_1(xx_2d)\n",
    "\n",
    "# --- Create two-dimensional plots\n",
    "fig, axs = plt.subplots(\n",
    "    nrows=1,\n",
    "    ncols=2,\n",
    "    figsize=(12, 4),\n",
    "    subplot_kw=dict(projection=\"3d\"),\n",
    "    layout=\"compressed\",\n",
    ")\n",
    "\n",
    "# Original function\n",
    "axs[0].plot_surface(\n",
    "    mesh_2d[0],\n",
    "    mesh_2d[1],\n",
    "    yy_diff_0_1_1_1.reshape(500, 500).T,\n",
    "    linewidth=0,\n",
    "    cmap=\"plasma\",\n",
    "    antialiased=False,\n",
    "    alpha=0.5\n",
    ")\n",
    "axs[0].set_xlabel(\"$x_1$\", fontsize=14)\n",
    "axs[0].set_ylabel(\"$x_2$\", fontsize=14)\n",
    "axs[0].set_title(\"$\\\\frac{\\\\partial^2 Q}{\\\\partial x_1 \\\\partial x_2}$\", fontsize=16)\n",
    "axs[0].tick_params(axis='both', which='major', labelsize=12)\n",
    "\n",
    "# Interpolating polynomial\n",
    "axs[1].plot_surface(\n",
    "    mesh_2d[0],\n",
    "    mesh_2d[1],\n",
    "    yy_diff_0_2_1_1.reshape(500, 500).T,\n",
    "    linewidth=0,\n",
    "    cmap=\"plasma\",\n",
    "    antialiased=False,\n",
    "    alpha=0.5\n",
    ")\n",
    "axs[1].set_xlabel(\"$x_1$\", fontsize=14)\n",
    "axs[1].set_ylabel(\"$x_2$\", fontsize=14)\n",
    "axs[1].set_title(\"$\\\\frac{\\\\partial^3 Q}{\\\\partial x_1^2 \\\\partial x_2}$\", fontsize=16)\n",
    "axs[1].tick_params(axis='both', which='major', labelsize=12)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19358c19-305d-4978-b445-e2534c293d33",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "## Summary\n",
    "\n",
    "In this in-depth tutorial, you've learned the basic calculus operations involving Minterpy polynomials, specifically:\n",
    "\n",
    "- **Definite integration**: Computes the integral over specified bounds, returning a numeric result.\n",
    "- **Differentiation**: Computes the derivative of the polynomial, resulting in another polynomial (the differentiated one).\n",
    "\n",
    "These operations were demonstrated using a two-dimensional polynomial, but they apply similarly to polynomials of higher dimensions.\n",
    "\n",
    "\n",
    "---\n",
    "\n",
    "So far, this series of in-depth tutorials have covered:\n",
    "\n",
    "- contructing Minterpy polynomials, from one-dimensional to multi-dimensional cases\n",
    "- performing basic arithmetic operations with the polynomials such as addition, subtraction, and multiplication.\n",
    "- performing basic calculus operations with the polynomials such as differentiation and definite integration\n",
    "\n",
    "In all the examples, you began with a polynomial in the Lagrange basis and then transformed it into a polynomial in the Newton basis.\n",
    "\n",
    "In fact, polynomials in Minterpy can be represented in different bases (beyond just Lagrange or Newton). The tutorial will provide an overview of the available bases and the transformations between them."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
